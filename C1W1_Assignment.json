{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "ZL_6GK8qX35J"
   },
   "source": [
    "\n",
    "\n",
    "# Week 1: Multiple Output Models using the Keras Functional API\n",
    "\n",
    "Welcome to the first programming assignment of the course! Your task will be to use the Keras functional API to train a model to predict two outputs. For this lab, you will use the **[Wine Quality Dataset](https://archive.ics.uci.edu/ml/datasets/Wine+Quality)** from the **UCI machine learning repository**. It has separate datasets for red wine and white wine.\n",
    "\n",
    "Normally, the wines are classified into one of the quality ratings specified in the attributes. In this exercise, you will combine the two datasets to predict the wine quality and whether the wine is red or white solely from the attributes. \n",
    "\n",
    "You will model wine quality estimations as a regression problem and wine type detection as a binary classification problem.\n",
    "\n",
    "#### Please complete sections that are marked **(TODO)**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "obdcD6urYBY9"
   },
   "source": [
    "## Imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "t8N3pcTQ5oQI"
   },
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "from tensorflow.keras.models import Model\n",
    "from tensorflow.keras.layers import Dense, Input\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import confusion_matrix\n",
    "import itertools\n",
    "\n",
    "import utils"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "gQMERzWQYpgm"
   },
   "source": [
    "## Load Dataset\n",
    "\n",
    "\n",
    "You will now download the dataset from the [UCI Machine Learning Repository](https://archive.ics.uci.edu/ml/index.php). \n",
    "\n",
    "### Pre-process the white wine dataset (TODO)\n",
    "You will add a new column named `is_red` in your dataframe to indicate if the wine is white or red. \n",
    "- In the white wine dataset, you will fill the column `is_red` with  zeros (0)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "deletable": false,
    "id": "2qYAjKXCd4RH",
    "nbgrader": {
     "cell_type": "code",
     "checksum": "cb9f284ba6255170fe04a309a407d72d",
     "grade": false,
     "grade_id": "cell-e5bfa0f152d9a21f",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "## Please uncomment all lines in this cell and replace those marked with `# YOUR CODE HERE`.\n",
    "## You can select all lines in this code cell with Ctrl+A (Windows/Linux) or Cmd+A (Mac), then press Ctrl+/ (Windows/Linux) or Cmd+/ (Mac) to uncomment.\n",
    "\n",
    "\n",
    "\n",
    "# # URL of the white wine dataset\n",
    "URL = 'http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv'\n",
    "\n",
    "# # load the dataset from the URL\n",
    "white_df = pd.read_csv(URL, sep=\";\")\n",
    "\n",
    "# # fill the `is_red` column with zeros.\n",
    "white_df[\"is_red\"] = 0\n",
    "\n",
    "# # keep only the first of duplicate items\n",
    "white_df = white_df.drop_duplicates(keep='first')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "defe38d6ec58fd31cd67b89e46c4373f",
     "grade": true,
     "grade_id": "cell-30575e713b55fc51",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[92m All public tests passed\n"
     ]
    }
   ],
   "source": [
    "# You can click `File -> Open` in the menu above and open the `utils.py` file \n",
    "# in case you want to inspect the unit tests being used for each graded function.\n",
    "\n",
    "utils.test_white_df(white_df)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "OQHK0ohBQRCk"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8.8\n",
      "9.1\n"
     ]
    }
   ],
   "source": [
    "print(white_df.alcohol[0])\n",
    "print(white_df.alcohol[100])\n",
    "\n",
    "# EXPECTED OUTPUT\n",
    "# 8.8\n",
    "# 9.1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Pre-process the red wine dataset (TODO)\n",
    "- In the red wine dataset, you will fill in the column `is_red` with ones (1)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "deletable": false,
    "id": "8y3QxKwBed8v",
    "nbgrader": {
     "cell_type": "code",
     "checksum": "be72275f78e2c2d0038dde9aa63f8d4f",
     "grade": false,
     "grade_id": "cell-e47a40f306593274",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "## Please uncomment all lines in this cell and replace those marked with `# YOUR CODE HERE`.\n",
    "## You can select all lines in this code cell with Ctrl+A (Windows/Linux) or Cmd+A (Mac), then press Ctrl+/ (Windows/Linux) or Cmd+/ (Mac) to uncomment.\n",
    "\n",
    "\n",
    "\n",
    "# # URL of the red wine dataset\n",
    "URL = 'http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv'\n",
    "\n",
    "# # load the dataset from the URL\n",
    "red_df = pd.read_csv(URL, sep=\";\")\n",
    "\n",
    "# # fill the `is_red` column with ones.\n",
    "red_df[\"is_red\"] = 1\n",
    "\n",
    "# # keep only the first of duplicate items\n",
    "red_df = red_df.drop_duplicates(keep='first')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "d8e0c91b0fd668b63ba74a8f2f958b59",
     "grade": true,
     "grade_id": "cell-2a75937adcc0c25b",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[92m All public tests passed\n"
     ]
    }
   ],
   "source": [
    "utils.test_red_df(red_df)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "zsB3LUzNQpo_"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9.4\n",
      "10.2\n"
     ]
    }
   ],
   "source": [
    "print(red_df.alcohol[0])\n",
    "print(red_df.alcohol[100])\n",
    "\n",
    "# EXPECTED OUTPUT\n",
    "# 9.4\n",
    "# 10.2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "2G8B-NYuM6-f"
   },
   "source": [
    "### Concatenate the datasets\n",
    "\n",
    "Next, concatenate the red and white wine dataframes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "YpQrOjJbfN3m"
   },
   "outputs": [],
   "source": [
    "df = pd.concat([red_df, white_df], ignore_index=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "Se2dTmThQyjb"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9.4\n",
      "9.5\n"
     ]
    }
   ],
   "source": [
    "print(df.alcohol[0])\n",
    "print(df.alcohol[100])\n",
    "\n",
    "# EXPECTED OUTPUT\n",
    "# 9.4\n",
    "# 9.5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fixed acidity</th>\n",
       "      <th>volatile acidity</th>\n",
       "      <th>citric acid</th>\n",
       "      <th>residual sugar</th>\n",
       "      <th>chlorides</th>\n",
       "      <th>free sulfur dioxide</th>\n",
       "      <th>total sulfur dioxide</th>\n",
       "      <th>density</th>\n",
       "      <th>pH</th>\n",
       "      <th>sulphates</th>\n",
       "      <th>alcohol</th>\n",
       "      <th>quality</th>\n",
       "      <th>is_red</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7.4</td>\n",
       "      <td>0.70</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.9</td>\n",
       "      <td>0.076</td>\n",
       "      <td>11.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>0.99780</td>\n",
       "      <td>3.51</td>\n",
       "      <td>0.56</td>\n",
       "      <td>9.4</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7.8</td>\n",
       "      <td>0.88</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.6</td>\n",
       "      <td>0.098</td>\n",
       "      <td>25.0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>0.99680</td>\n",
       "      <td>3.20</td>\n",
       "      <td>0.68</td>\n",
       "      <td>9.8</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7.8</td>\n",
       "      <td>0.76</td>\n",
       "      <td>0.04</td>\n",
       "      <td>2.3</td>\n",
       "      <td>0.092</td>\n",
       "      <td>15.0</td>\n",
       "      <td>54.0</td>\n",
       "      <td>0.99700</td>\n",
       "      <td>3.26</td>\n",
       "      <td>0.65</td>\n",
       "      <td>9.8</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>11.2</td>\n",
       "      <td>0.28</td>\n",
       "      <td>0.56</td>\n",
       "      <td>1.9</td>\n",
       "      <td>0.075</td>\n",
       "      <td>17.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>0.99800</td>\n",
       "      <td>3.16</td>\n",
       "      <td>0.58</td>\n",
       "      <td>9.8</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7.4</td>\n",
       "      <td>0.66</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.8</td>\n",
       "      <td>0.075</td>\n",
       "      <td>13.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>0.99780</td>\n",
       "      <td>3.51</td>\n",
       "      <td>0.56</td>\n",
       "      <td>9.4</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5315</th>\n",
       "      <td>6.2</td>\n",
       "      <td>0.21</td>\n",
       "      <td>0.29</td>\n",
       "      <td>1.6</td>\n",
       "      <td>0.039</td>\n",
       "      <td>24.0</td>\n",
       "      <td>92.0</td>\n",
       "      <td>0.99114</td>\n",
       "      <td>3.27</td>\n",
       "      <td>0.50</td>\n",
       "      <td>11.2</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5316</th>\n",
       "      <td>6.6</td>\n",
       "      <td>0.32</td>\n",
       "      <td>0.36</td>\n",
       "      <td>8.0</td>\n",
       "      <td>0.047</td>\n",
       "      <td>57.0</td>\n",
       "      <td>168.0</td>\n",
       "      <td>0.99490</td>\n",
       "      <td>3.15</td>\n",
       "      <td>0.46</td>\n",
       "      <td>9.6</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5317</th>\n",
       "      <td>6.5</td>\n",
       "      <td>0.24</td>\n",
       "      <td>0.19</td>\n",
       "      <td>1.2</td>\n",
       "      <td>0.041</td>\n",
       "      <td>30.0</td>\n",
       "      <td>111.0</td>\n",
       "      <td>0.99254</td>\n",
       "      <td>2.99</td>\n",
       "      <td>0.46</td>\n",
       "      <td>9.4</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5318</th>\n",
       "      <td>5.5</td>\n",
       "      <td>0.29</td>\n",
       "      <td>0.30</td>\n",
       "      <td>1.1</td>\n",
       "      <td>0.022</td>\n",
       "      <td>20.0</td>\n",
       "      <td>110.0</td>\n",
       "      <td>0.98869</td>\n",
       "      <td>3.34</td>\n",
       "      <td>0.38</td>\n",
       "      <td>12.8</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5319</th>\n",
       "      <td>6.0</td>\n",
       "      <td>0.21</td>\n",
       "      <td>0.38</td>\n",
       "      <td>0.8</td>\n",
       "      <td>0.020</td>\n",
       "      <td>22.0</td>\n",
       "      <td>98.0</td>\n",
       "      <td>0.98941</td>\n",
       "      <td>3.26</td>\n",
       "      <td>0.32</td>\n",
       "      <td>11.8</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5320 rows × 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  \\\n",
       "0               7.4              0.70         0.00             1.9      0.076   \n",
       "1               7.8              0.88         0.00             2.6      0.098   \n",
       "2               7.8              0.76         0.04             2.3      0.092   \n",
       "3              11.2              0.28         0.56             1.9      0.075   \n",
       "4               7.4              0.66         0.00             1.8      0.075   \n",
       "...             ...               ...          ...             ...        ...   \n",
       "5315            6.2              0.21         0.29             1.6      0.039   \n",
       "5316            6.6              0.32         0.36             8.0      0.047   \n",
       "5317            6.5              0.24         0.19             1.2      0.041   \n",
       "5318            5.5              0.29         0.30             1.1      0.022   \n",
       "5319            6.0              0.21         0.38             0.8      0.020   \n",
       "\n",
       "      free sulfur dioxide  total sulfur dioxide  density    pH  sulphates  \\\n",
       "0                    11.0                  34.0  0.99780  3.51       0.56   \n",
       "1                    25.0                  67.0  0.99680  3.20       0.68   \n",
       "2                    15.0                  54.0  0.99700  3.26       0.65   \n",
       "3                    17.0                  60.0  0.99800  3.16       0.58   \n",
       "4                    13.0                  40.0  0.99780  3.51       0.56   \n",
       "...                   ...                   ...      ...   ...        ...   \n",
       "5315                 24.0                  92.0  0.99114  3.27       0.50   \n",
       "5316                 57.0                 168.0  0.99490  3.15       0.46   \n",
       "5317                 30.0                 111.0  0.99254  2.99       0.46   \n",
       "5318                 20.0                 110.0  0.98869  3.34       0.38   \n",
       "5319                 22.0                  98.0  0.98941  3.26       0.32   \n",
       "\n",
       "      alcohol  quality  is_red  \n",
       "0         9.4        5       1  \n",
       "1         9.8        5       1  \n",
       "2         9.8        5       1  \n",
       "3         9.8        6       1  \n",
       "4         9.4        5       1  \n",
       "...       ...      ...     ...  \n",
       "5315     11.2        6       0  \n",
       "5316      9.6        5       0  \n",
       "5317      9.4        6       0  \n",
       "5318     12.8        7       0  \n",
       "5319     11.8        6       0  \n",
       "\n",
       "[5320 rows x 13 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In a real-world scenario, you should shuffle the data. For this assignment however, **you are not** going to do that because the grader needs to test with deterministic data. If you want the code to do it **after** you've gotten your grade for this notebook, we left the commented line below for reference"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "wx6y3rPpQv4k"
   },
   "outputs": [],
   "source": [
    "#df = df.iloc[np.random.permutation(len(df))]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "-EqIcbg5M_n1"
   },
   "source": [
    "This will chart the quality of the wines."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "IsvK0-Sgy17C"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df['quality'].hist(bins=20);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "Nut1rmYLzf-p"
   },
   "source": [
    "### Imbalanced data (TODO)\n",
    "You can see from the plot above that the wine quality dataset is imbalanced. \n",
    "- Since there are very few observations with quality equal to 3, 4, 8 and 9, you can drop these observations from your dataset. \n",
    "- You can do this by removing data belonging to all classes except those > 4 and < 8."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "deletable": false,
    "id": "doH9_-gnf3sz",
    "nbgrader": {
     "cell_type": "code",
     "checksum": "d9ba9fc3a3ca02ccc567be33652b80fe",
     "grade": false,
     "grade_id": "cell-6a3e9db696f6827b",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "## Please uncomment all lines in this cell and replace those marked with `# YOUR CODE HERE`.\n",
    "## You can select all lines in this code cell with Ctrl+A (Windows/Linux) or Cmd+A (Mac), then press Ctrl+/ (Windows/Linux) or Cmd+/ (Mac) to uncomment.\n",
    "\n",
    "\n",
    "\n",
    "# # get data with wine quality greater than 4 and less than 8\n",
    "df = df[(df['quality'] > 4) & (df['quality'] < 8 )]\n",
    "\n",
    "# # reset index and drop the old one\n",
    "df = df.reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "281e1d86a4803560ed5892cd7eda4c01",
     "grade": true,
     "grade_id": "cell-aed3da719d4682c7",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[92m All public tests passed\n"
     ]
    }
   ],
   "source": [
    "utils.test_df_drop(df)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "xNR1iAlMRPXO"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9.4\n",
      "10.9\n"
     ]
    }
   ],
   "source": [
    "print(df.alcohol[0])\n",
    "print(df.alcohol[100])\n",
    "\n",
    "# EXPECTED OUTPUT\n",
    "# 9.4\n",
    "# 10.9"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "cwhuRpnVRTzG"
   },
   "source": [
    "You can plot again to see the new range of data and quality"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "857ygzZiLgGg"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df['quality'].hist(bins=20);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "n3k0vqSsp84t"
   },
   "source": [
    "### Train Test Split (TODO)\n",
    "\n",
    "Next, you can split the datasets into training, test and validation datasets.\n",
    "- The data frame should be split 80:20 into `train` and `test` sets.\n",
    "- The resulting `train` should then be split 80:20 into `train` and `val` sets.\n",
    "- The `train_test_split` parameter `test_size` takes a float value that ranges between 0. and 1, and represents the proportion of the dataset that is allocated to the test set.  The rest of the data is allocated to the training set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "deletable": false,
    "id": "PAVIf2-fgRVY",
    "nbgrader": {
     "cell_type": "code",
     "checksum": "7f5738f4fb51d65adc9a8acbdf2b9970",
     "grade": false,
     "grade_id": "cell-91946cadf745206b",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "## Please uncomment all lines in this cell and replace those marked with `# YOUR CODE HERE`.\n",
    "## You can select all lines in this code cell with Ctrl+A (Windows/Linux) or Cmd+A (Mac), then press Ctrl+/ (Windows/Linux) or Cmd+/ (Mac) to uncomment.\n",
    "\n",
    "\n",
    "\n",
    "## Please do not change the random_state parameter. This is needed for grading.\n",
    "\n",
    "# # split df into 80:20 train and test sets\n",
    "train, test = train_test_split(df, test_size=0.2, random_state = 1)\n",
    "                               \n",
    "# # split train into 80:20 train and val sets\n",
    "train, val = train_test_split(train, test_size=0.2, random_state = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "deletable": false,
    "editable": false,
    "id": "57h9LcEzRWpk",
    "nbgrader": {
     "cell_type": "code",
     "checksum": "42adbe9e66efac7c7a5f8cd73ac92f22",
     "grade": true,
     "grade_id": "cell-64b8b38cd0b965f6",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[92m All public tests passed\n"
     ]
    }
   ],
   "source": [
    "utils.test_data_sizes(train.size, test.size, val.size)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fixed acidity</th>\n",
       "      <th>volatile acidity</th>\n",
       "      <th>citric acid</th>\n",
       "      <th>residual sugar</th>\n",
       "      <th>chlorides</th>\n",
       "      <th>free sulfur dioxide</th>\n",
       "      <th>total sulfur dioxide</th>\n",
       "      <th>density</th>\n",
       "      <th>pH</th>\n",
       "      <th>sulphates</th>\n",
       "      <th>alcohol</th>\n",
       "      <th>quality</th>\n",
       "      <th>is_red</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>225</th>\n",
       "      <td>7.5</td>\n",
       "      <td>0.65</td>\n",
       "      <td>0.18</td>\n",
       "      <td>7.00</td>\n",
       "      <td>0.088</td>\n",
       "      <td>27.0</td>\n",
       "      <td>94.0</td>\n",
       "      <td>0.99915</td>\n",
       "      <td>3.38</td>\n",
       "      <td>0.77</td>\n",
       "      <td>9.4</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3557</th>\n",
       "      <td>6.3</td>\n",
       "      <td>0.27</td>\n",
       "      <td>0.29</td>\n",
       "      <td>12.20</td>\n",
       "      <td>0.044</td>\n",
       "      <td>59.0</td>\n",
       "      <td>196.0</td>\n",
       "      <td>0.99782</td>\n",
       "      <td>3.14</td>\n",
       "      <td>0.40</td>\n",
       "      <td>8.8</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3825</th>\n",
       "      <td>8.8</td>\n",
       "      <td>0.27</td>\n",
       "      <td>0.25</td>\n",
       "      <td>5.00</td>\n",
       "      <td>0.024</td>\n",
       "      <td>52.0</td>\n",
       "      <td>99.0</td>\n",
       "      <td>0.99250</td>\n",
       "      <td>2.87</td>\n",
       "      <td>0.49</td>\n",
       "      <td>11.4</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1740</th>\n",
       "      <td>6.4</td>\n",
       "      <td>0.45</td>\n",
       "      <td>0.07</td>\n",
       "      <td>1.10</td>\n",
       "      <td>0.030</td>\n",
       "      <td>10.0</td>\n",
       "      <td>131.0</td>\n",
       "      <td>0.99050</td>\n",
       "      <td>2.97</td>\n",
       "      <td>0.28</td>\n",
       "      <td>10.8</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1221</th>\n",
       "      <td>7.2</td>\n",
       "      <td>0.53</td>\n",
       "      <td>0.13</td>\n",
       "      <td>2.00</td>\n",
       "      <td>0.058</td>\n",
       "      <td>18.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>0.99573</td>\n",
       "      <td>3.21</td>\n",
       "      <td>0.68</td>\n",
       "      <td>9.9</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1916</th>\n",
       "      <td>7.0</td>\n",
       "      <td>0.21</td>\n",
       "      <td>0.37</td>\n",
       "      <td>7.20</td>\n",
       "      <td>0.042</td>\n",
       "      <td>36.0</td>\n",
       "      <td>167.0</td>\n",
       "      <td>0.99580</td>\n",
       "      <td>3.26</td>\n",
       "      <td>0.56</td>\n",
       "      <td>9.8</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>606</th>\n",
       "      <td>9.2</td>\n",
       "      <td>0.53</td>\n",
       "      <td>0.24</td>\n",
       "      <td>2.60</td>\n",
       "      <td>0.078</td>\n",
       "      <td>28.0</td>\n",
       "      <td>139.0</td>\n",
       "      <td>0.99788</td>\n",
       "      <td>3.21</td>\n",
       "      <td>0.57</td>\n",
       "      <td>9.5</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1255</th>\n",
       "      <td>6.0</td>\n",
       "      <td>0.58</td>\n",
       "      <td>0.20</td>\n",
       "      <td>2.40</td>\n",
       "      <td>0.075</td>\n",
       "      <td>15.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>0.99467</td>\n",
       "      <td>3.58</td>\n",
       "      <td>0.67</td>\n",
       "      <td>12.5</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>959</th>\n",
       "      <td>6.8</td>\n",
       "      <td>0.66</td>\n",
       "      <td>0.07</td>\n",
       "      <td>1.60</td>\n",
       "      <td>0.070</td>\n",
       "      <td>16.0</td>\n",
       "      <td>61.0</td>\n",
       "      <td>0.99572</td>\n",
       "      <td>3.29</td>\n",
       "      <td>0.60</td>\n",
       "      <td>9.3</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2887</th>\n",
       "      <td>6.0</td>\n",
       "      <td>0.28</td>\n",
       "      <td>0.22</td>\n",
       "      <td>12.15</td>\n",
       "      <td>0.048</td>\n",
       "      <td>42.0</td>\n",
       "      <td>163.0</td>\n",
       "      <td>0.99570</td>\n",
       "      <td>3.20</td>\n",
       "      <td>0.46</td>\n",
       "      <td>10.1</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3155 rows × 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  \\\n",
       "225             7.5              0.65         0.18            7.00      0.088   \n",
       "3557            6.3              0.27         0.29           12.20      0.044   \n",
       "3825            8.8              0.27         0.25            5.00      0.024   \n",
       "1740            6.4              0.45         0.07            1.10      0.030   \n",
       "1221            7.2              0.53         0.13            2.00      0.058   \n",
       "...             ...               ...          ...             ...        ...   \n",
       "1916            7.0              0.21         0.37            7.20      0.042   \n",
       "606             9.2              0.53         0.24            2.60      0.078   \n",
       "1255            6.0              0.58         0.20            2.40      0.075   \n",
       "959             6.8              0.66         0.07            1.60      0.070   \n",
       "2887            6.0              0.28         0.22           12.15      0.048   \n",
       "\n",
       "      free sulfur dioxide  total sulfur dioxide  density    pH  sulphates  \\\n",
       "225                  27.0                  94.0  0.99915  3.38       0.77   \n",
       "3557                 59.0                 196.0  0.99782  3.14       0.40   \n",
       "3825                 52.0                  99.0  0.99250  2.87       0.49   \n",
       "1740                 10.0                 131.0  0.99050  2.97       0.28   \n",
       "1221                 18.0                  22.0  0.99573  3.21       0.68   \n",
       "...                   ...                   ...      ...   ...        ...   \n",
       "1916                 36.0                 167.0  0.99580  3.26       0.56   \n",
       "606                  28.0                 139.0  0.99788  3.21       0.57   \n",
       "1255                 15.0                  50.0  0.99467  3.58       0.67   \n",
       "959                  16.0                  61.0  0.99572  3.29       0.60   \n",
       "2887                 42.0                 163.0  0.99570  3.20       0.46   \n",
       "\n",
       "      alcohol  quality  is_red  \n",
       "225       9.4        5       1  \n",
       "3557      8.8        6       0  \n",
       "3825     11.4        5       0  \n",
       "1740     10.8        5       0  \n",
       "1221      9.9        6       1  \n",
       "...       ...      ...     ...  \n",
       "1916      9.8        6       0  \n",
       "606       9.5        5       1  \n",
       "1255     12.5        6       1  \n",
       "959       9.3        5       1  \n",
       "2887     10.1        5       0  \n",
       "\n",
       "[3155 rows x 13 columns]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "RwTNu4KFqG-K"
   },
   "source": [
    "Here's where you can explore the training stats. You can pop the labels 'is_red' and 'quality' from the data as these will be used as the labels\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "Y_afyhhHM6WQ"
   },
   "outputs": [],
   "source": [
    "train_stats = train.describe()\n",
    "train_stats.pop('is_red')\n",
    "train_stats.pop('quality')\n",
    "train_stats = train_stats.transpose()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fixed acidity</th>\n",
       "      <td>3155.0</td>\n",
       "      <td>7.221616</td>\n",
       "      <td>1.325297</td>\n",
       "      <td>3.80000</td>\n",
       "      <td>6.40000</td>\n",
       "      <td>7.00000</td>\n",
       "      <td>7.7000</td>\n",
       "      <td>15.60000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>volatile acidity</th>\n",
       "      <td>3155.0</td>\n",
       "      <td>0.338929</td>\n",
       "      <td>0.162476</td>\n",
       "      <td>0.08000</td>\n",
       "      <td>0.23000</td>\n",
       "      <td>0.29000</td>\n",
       "      <td>0.4000</td>\n",
       "      <td>1.24000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>citric acid</th>\n",
       "      <td>3155.0</td>\n",
       "      <td>0.321569</td>\n",
       "      <td>0.147970</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.25000</td>\n",
       "      <td>0.31000</td>\n",
       "      <td>0.4000</td>\n",
       "      <td>1.66000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>residual sugar</th>\n",
       "      <td>3155.0</td>\n",
       "      <td>5.155911</td>\n",
       "      <td>4.639632</td>\n",
       "      <td>0.60000</td>\n",
       "      <td>1.80000</td>\n",
       "      <td>2.80000</td>\n",
       "      <td>7.6500</td>\n",
       "      <td>65.80000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>chlorides</th>\n",
       "      <td>3155.0</td>\n",
       "      <td>0.056976</td>\n",
       "      <td>0.036802</td>\n",
       "      <td>0.01200</td>\n",
       "      <td>0.03800</td>\n",
       "      <td>0.04700</td>\n",
       "      <td>0.0660</td>\n",
       "      <td>0.61100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>free sulfur dioxide</th>\n",
       "      <td>3155.0</td>\n",
       "      <td>30.388590</td>\n",
       "      <td>17.236784</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>17.00000</td>\n",
       "      <td>28.00000</td>\n",
       "      <td>41.0000</td>\n",
       "      <td>131.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total sulfur dioxide</th>\n",
       "      <td>3155.0</td>\n",
       "      <td>115.062282</td>\n",
       "      <td>56.706617</td>\n",
       "      <td>6.00000</td>\n",
       "      <td>75.00000</td>\n",
       "      <td>117.00000</td>\n",
       "      <td>156.0000</td>\n",
       "      <td>344.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>density</th>\n",
       "      <td>3155.0</td>\n",
       "      <td>0.994633</td>\n",
       "      <td>0.003005</td>\n",
       "      <td>0.98711</td>\n",
       "      <td>0.99232</td>\n",
       "      <td>0.99481</td>\n",
       "      <td>0.9968</td>\n",
       "      <td>1.03898</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pH</th>\n",
       "      <td>3155.0</td>\n",
       "      <td>3.223201</td>\n",
       "      <td>0.161272</td>\n",
       "      <td>2.72000</td>\n",
       "      <td>3.11000</td>\n",
       "      <td>3.21000</td>\n",
       "      <td>3.3300</td>\n",
       "      <td>4.01000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sulphates</th>\n",
       "      <td>3155.0</td>\n",
       "      <td>0.534051</td>\n",
       "      <td>0.149149</td>\n",
       "      <td>0.22000</td>\n",
       "      <td>0.43000</td>\n",
       "      <td>0.51000</td>\n",
       "      <td>0.6000</td>\n",
       "      <td>1.95000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>alcohol</th>\n",
       "      <td>3155.0</td>\n",
       "      <td>10.504466</td>\n",
       "      <td>1.154654</td>\n",
       "      <td>8.50000</td>\n",
       "      <td>9.50000</td>\n",
       "      <td>10.30000</td>\n",
       "      <td>11.3000</td>\n",
       "      <td>14.00000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       count        mean        std      min       25%  \\\n",
       "fixed acidity         3155.0    7.221616   1.325297  3.80000   6.40000   \n",
       "volatile acidity      3155.0    0.338929   0.162476  0.08000   0.23000   \n",
       "citric acid           3155.0    0.321569   0.147970  0.00000   0.25000   \n",
       "residual sugar        3155.0    5.155911   4.639632  0.60000   1.80000   \n",
       "chlorides             3155.0    0.056976   0.036802  0.01200   0.03800   \n",
       "free sulfur dioxide   3155.0   30.388590  17.236784  1.00000  17.00000   \n",
       "total sulfur dioxide  3155.0  115.062282  56.706617  6.00000  75.00000   \n",
       "density               3155.0    0.994633   0.003005  0.98711   0.99232   \n",
       "pH                    3155.0    3.223201   0.161272  2.72000   3.11000   \n",
       "sulphates             3155.0    0.534051   0.149149  0.22000   0.43000   \n",
       "alcohol               3155.0   10.504466   1.154654  8.50000   9.50000   \n",
       "\n",
       "                            50%       75%        max  \n",
       "fixed acidity           7.00000    7.7000   15.60000  \n",
       "volatile acidity        0.29000    0.4000    1.24000  \n",
       "citric acid             0.31000    0.4000    1.66000  \n",
       "residual sugar          2.80000    7.6500   65.80000  \n",
       "chlorides               0.04700    0.0660    0.61100  \n",
       "free sulfur dioxide    28.00000   41.0000  131.00000  \n",
       "total sulfur dioxide  117.00000  156.0000  344.00000  \n",
       "density                 0.99481    0.9968    1.03898  \n",
       "pH                      3.21000    3.3300    4.01000  \n",
       "sulphates               0.51000    0.6000    1.95000  \n",
       "alcohol                10.30000   11.3000   14.00000  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_stats"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "ahvbYm4fNqSt"
   },
   "source": [
    "Explore the training stats!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "n_gAtPjZ0otF"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fixed acidity</th>\n",
       "      <td>3155.0</td>\n",
       "      <td>7.221616</td>\n",
       "      <td>1.325297</td>\n",
       "      <td>3.80000</td>\n",
       "      <td>6.40000</td>\n",
       "      <td>7.00000</td>\n",
       "      <td>7.7000</td>\n",
       "      <td>15.60000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>volatile acidity</th>\n",
       "      <td>3155.0</td>\n",
       "      <td>0.338929</td>\n",
       "      <td>0.162476</td>\n",
       "      <td>0.08000</td>\n",
       "      <td>0.23000</td>\n",
       "      <td>0.29000</td>\n",
       "      <td>0.4000</td>\n",
       "      <td>1.24000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>citric acid</th>\n",
       "      <td>3155.0</td>\n",
       "      <td>0.321569</td>\n",
       "      <td>0.147970</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.25000</td>\n",
       "      <td>0.31000</td>\n",
       "      <td>0.4000</td>\n",
       "      <td>1.66000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>residual sugar</th>\n",
       "      <td>3155.0</td>\n",
       "      <td>5.155911</td>\n",
       "      <td>4.639632</td>\n",
       "      <td>0.60000</td>\n",
       "      <td>1.80000</td>\n",
       "      <td>2.80000</td>\n",
       "      <td>7.6500</td>\n",
       "      <td>65.80000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>chlorides</th>\n",
       "      <td>3155.0</td>\n",
       "      <td>0.056976</td>\n",
       "      <td>0.036802</td>\n",
       "      <td>0.01200</td>\n",
       "      <td>0.03800</td>\n",
       "      <td>0.04700</td>\n",
       "      <td>0.0660</td>\n",
       "      <td>0.61100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>free sulfur dioxide</th>\n",
       "      <td>3155.0</td>\n",
       "      <td>30.388590</td>\n",
       "      <td>17.236784</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>17.00000</td>\n",
       "      <td>28.00000</td>\n",
       "      <td>41.0000</td>\n",
       "      <td>131.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total sulfur dioxide</th>\n",
       "      <td>3155.0</td>\n",
       "      <td>115.062282</td>\n",
       "      <td>56.706617</td>\n",
       "      <td>6.00000</td>\n",
       "      <td>75.00000</td>\n",
       "      <td>117.00000</td>\n",
       "      <td>156.0000</td>\n",
       "      <td>344.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>density</th>\n",
       "      <td>3155.0</td>\n",
       "      <td>0.994633</td>\n",
       "      <td>0.003005</td>\n",
       "      <td>0.98711</td>\n",
       "      <td>0.99232</td>\n",
       "      <td>0.99481</td>\n",
       "      <td>0.9968</td>\n",
       "      <td>1.03898</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pH</th>\n",
       "      <td>3155.0</td>\n",
       "      <td>3.223201</td>\n",
       "      <td>0.161272</td>\n",
       "      <td>2.72000</td>\n",
       "      <td>3.11000</td>\n",
       "      <td>3.21000</td>\n",
       "      <td>3.3300</td>\n",
       "      <td>4.01000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sulphates</th>\n",
       "      <td>3155.0</td>\n",
       "      <td>0.534051</td>\n",
       "      <td>0.149149</td>\n",
       "      <td>0.22000</td>\n",
       "      <td>0.43000</td>\n",
       "      <td>0.51000</td>\n",
       "      <td>0.6000</td>\n",
       "      <td>1.95000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>alcohol</th>\n",
       "      <td>3155.0</td>\n",
       "      <td>10.504466</td>\n",
       "      <td>1.154654</td>\n",
       "      <td>8.50000</td>\n",
       "      <td>9.50000</td>\n",
       "      <td>10.30000</td>\n",
       "      <td>11.3000</td>\n",
       "      <td>14.00000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       count        mean        std      min       25%  \\\n",
       "fixed acidity         3155.0    7.221616   1.325297  3.80000   6.40000   \n",
       "volatile acidity      3155.0    0.338929   0.162476  0.08000   0.23000   \n",
       "citric acid           3155.0    0.321569   0.147970  0.00000   0.25000   \n",
       "residual sugar        3155.0    5.155911   4.639632  0.60000   1.80000   \n",
       "chlorides             3155.0    0.056976   0.036802  0.01200   0.03800   \n",
       "free sulfur dioxide   3155.0   30.388590  17.236784  1.00000  17.00000   \n",
       "total sulfur dioxide  3155.0  115.062282  56.706617  6.00000  75.00000   \n",
       "density               3155.0    0.994633   0.003005  0.98711   0.99232   \n",
       "pH                    3155.0    3.223201   0.161272  2.72000   3.11000   \n",
       "sulphates             3155.0    0.534051   0.149149  0.22000   0.43000   \n",
       "alcohol               3155.0   10.504466   1.154654  8.50000   9.50000   \n",
       "\n",
       "                            50%       75%        max  \n",
       "fixed acidity           7.00000    7.7000   15.60000  \n",
       "volatile acidity        0.29000    0.4000    1.24000  \n",
       "citric acid             0.31000    0.4000    1.66000  \n",
       "residual sugar          2.80000    7.6500   65.80000  \n",
       "chlorides               0.04700    0.0660    0.61100  \n",
       "free sulfur dioxide    28.00000   41.0000  131.00000  \n",
       "total sulfur dioxide  117.00000  156.0000  344.00000  \n",
       "density                 0.99481    0.9968    1.03898  \n",
       "pH                      3.21000    3.3300    4.01000  \n",
       "sulphates               0.51000    0.6000    1.95000  \n",
       "alcohol                10.30000   11.3000   14.00000  "
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_stats"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "bGPvt9jir_HC"
   },
   "source": [
    "### Get the labels (TODO)\n",
    "\n",
    "The features and labels are currently in the same dataframe.\n",
    "- You will want to store the label columns `is_red` and `quality` separately from the feature columns.  \n",
    "- The following function, `format_output`, gets these two columns from the dataframe (it's given to you).\n",
    "- `format_output` also formats the data into numpy arrays. \n",
    "- Please use the `format_output` and apply it to the `train`, `val` and `test` sets to get dataframes for the labels."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "Z_fs14XQqZVP"
   },
   "outputs": [],
   "source": [
    "def format_output(data):\n",
    "    is_red = data.pop('is_red')\n",
    "    is_red = np.array(is_red)\n",
    "    quality = data.pop('quality')\n",
    "    quality = np.array(quality)\n",
    "    return (quality, is_red)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "deletable": false,
    "id": "8L3ZZe1fQicm",
    "nbgrader": {
     "cell_type": "code",
     "checksum": "7a86809e54895a816434c48dc903f55d",
     "grade": false,
     "grade_id": "cell-5c30fa2c2a354b0f",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "## Please uncomment all lines in this cell and replace those marked with `# YOUR CODE HERE`.\n",
    "## You can select all lines in this code cell with Ctrl+A (Windows/Linux) or Cmd+A (Mac), then press Ctrl+/ (Windows/Linux) or Cmd+/ (Mac) to uncomment.\n",
    "# # format the output of the train set\n",
    "train_Y = format_output(train)\n",
    "\n",
    "# # format the output of the val set\n",
    "val_Y = format_output(val)\n",
    "    \n",
    "# # format the output of the test set\n",
    "test_Y = format_output(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "359cabbafaed14ec9bbc1e57a7b6f32c",
     "grade": true,
     "grade_id": "cell-4977d8befb80f56b",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[92m All public tests passed\n"
     ]
    }
   ],
   "source": [
    "utils.test_format_output(df, train_Y, val_Y, test_Y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Notice that after you get the labels, the `train`, `val` and `test` dataframes no longer contain the label columns, and contain just the feature columns.\n",
    "- This is because you used `.pop` in the `format_output` function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fixed acidity</th>\n",
       "      <th>volatile acidity</th>\n",
       "      <th>citric acid</th>\n",
       "      <th>residual sugar</th>\n",
       "      <th>chlorides</th>\n",
       "      <th>free sulfur dioxide</th>\n",
       "      <th>total sulfur dioxide</th>\n",
       "      <th>density</th>\n",
       "      <th>pH</th>\n",
       "      <th>sulphates</th>\n",
       "      <th>alcohol</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>225</th>\n",
       "      <td>7.5</td>\n",
       "      <td>0.65</td>\n",
       "      <td>0.18</td>\n",
       "      <td>7.0</td>\n",
       "      <td>0.088</td>\n",
       "      <td>27.0</td>\n",
       "      <td>94.0</td>\n",
       "      <td>0.99915</td>\n",
       "      <td>3.38</td>\n",
       "      <td>0.77</td>\n",
       "      <td>9.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3557</th>\n",
       "      <td>6.3</td>\n",
       "      <td>0.27</td>\n",
       "      <td>0.29</td>\n",
       "      <td>12.2</td>\n",
       "      <td>0.044</td>\n",
       "      <td>59.0</td>\n",
       "      <td>196.0</td>\n",
       "      <td>0.99782</td>\n",
       "      <td>3.14</td>\n",
       "      <td>0.40</td>\n",
       "      <td>8.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3825</th>\n",
       "      <td>8.8</td>\n",
       "      <td>0.27</td>\n",
       "      <td>0.25</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.024</td>\n",
       "      <td>52.0</td>\n",
       "      <td>99.0</td>\n",
       "      <td>0.99250</td>\n",
       "      <td>2.87</td>\n",
       "      <td>0.49</td>\n",
       "      <td>11.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1740</th>\n",
       "      <td>6.4</td>\n",
       "      <td>0.45</td>\n",
       "      <td>0.07</td>\n",
       "      <td>1.1</td>\n",
       "      <td>0.030</td>\n",
       "      <td>10.0</td>\n",
       "      <td>131.0</td>\n",
       "      <td>0.99050</td>\n",
       "      <td>2.97</td>\n",
       "      <td>0.28</td>\n",
       "      <td>10.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1221</th>\n",
       "      <td>7.2</td>\n",
       "      <td>0.53</td>\n",
       "      <td>0.13</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.058</td>\n",
       "      <td>18.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>0.99573</td>\n",
       "      <td>3.21</td>\n",
       "      <td>0.68</td>\n",
       "      <td>9.9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  \\\n",
       "225             7.5              0.65         0.18             7.0      0.088   \n",
       "3557            6.3              0.27         0.29            12.2      0.044   \n",
       "3825            8.8              0.27         0.25             5.0      0.024   \n",
       "1740            6.4              0.45         0.07             1.1      0.030   \n",
       "1221            7.2              0.53         0.13             2.0      0.058   \n",
       "\n",
       "      free sulfur dioxide  total sulfur dioxide  density    pH  sulphates  \\\n",
       "225                  27.0                  94.0  0.99915  3.38       0.77   \n",
       "3557                 59.0                 196.0  0.99782  3.14       0.40   \n",
       "3825                 52.0                  99.0  0.99250  2.87       0.49   \n",
       "1740                 10.0                 131.0  0.99050  2.97       0.28   \n",
       "1221                 18.0                  22.0  0.99573  3.21       0.68   \n",
       "\n",
       "      alcohol  \n",
       "225       9.4  \n",
       "3557      8.8  \n",
       "3825     11.4  \n",
       "1740     10.8  \n",
       "1221      9.9  "
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "hEdbrruAsN1D"
   },
   "source": [
    "### Normalize the data (TODO)\n",
    "\n",
    "Next, you can normalize the data, x, using the formula:\n",
    "$$x_{norm} = \\frac{x - \\mu}{\\sigma}$$\n",
    "- The `norm` function is defined for you.\n",
    "- Please apply the `norm` function to normalize the dataframes that contains the feature columns of `train`, `val` and `test` sets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "WWiZPAHCLjUs"
   },
   "outputs": [],
   "source": [
    "def norm(x):\n",
    "    return (x - train_stats['mean']) / train_stats['std']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3155,)"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_Y[0].shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "deletable": false,
    "id": "JEaOi2I2Lk69",
    "nbgrader": {
     "cell_type": "code",
     "checksum": "6bc0cdcb563d192f271067aa3373ff32",
     "grade": false,
     "grade_id": "cell-d8416d975c371095",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "## Please uncomment all lines in this cell and replace those marked with `# YOUR CODE HERE`.\n",
    "## You can select all lines in this code cell with Ctrl+A (Windows/Linux) or Cmd+A (Mac), then press Ctrl+/ (Windows/Linux) or Cmd+/ (Mac) to uncomment.\n",
    "\n",
    "\n",
    "\n",
    "# # normalize the train set\n",
    "norm_train_X = norm(train)\n",
    "    \n",
    "# # normalize the val set\n",
    "norm_val_X = norm(val)\n",
    "    \n",
    "# # normalize the test set\n",
    "norm_test_X = norm(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "4f567db45bf40191601780379cc100b8",
     "grade": true,
     "grade_id": "cell-97fad979d157529b",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[92m All public tests passed\n"
     ]
    }
   ],
   "source": [
    "utils.test_norm(norm_train_X, norm_val_X, norm_test_X, train, val, test)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "hzykDwQhsaPO"
   },
   "source": [
    "## Define the Model (TODO)\n",
    "\n",
    "Define the model using the functional API. The base model will be 2 `Dense` layers of 128 neurons each, and have the `'relu'` activation.\n",
    "- Check out the documentation for [tf.keras.layers.Dense](https://www.tensorflow.org/api_docs/python/tf/keras/layers/Dense)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "deletable": false,
    "id": "Rhcns3oTFkM6",
    "nbgrader": {
     "cell_type": "code",
     "checksum": "74b031247e569526552bf13a034a1c07",
     "grade": false,
     "grade_id": "cell-73fceedad1fe351c",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "## Please uncomment all lines in this cell and replace those marked with `# YOUR CODE HERE`.\n",
    "## You can select all lines in this code cell with Ctrl+A (Windows/Linux) or Cmd+A (Mac), then press Ctrl+/ (Windows/Linux) or Cmd+/ (Mac) to uncomment.\n",
    "\n",
    "\n",
    "\n",
    "def base_model(inputs):\n",
    "#     # connect a Dense layer with 128 neurons and a relu activation\n",
    "     x = Dense(units=\"128\",activation=\"relu\")(inputs)\n",
    "#     # connect another Dense layer with 128 neurons and a relu activation\n",
    "     X = Dense(units=\"128\",activation=\"relu\")(x)\n",
    "     return X\n",
    "  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "9255924b3def80f679616e4c851a43e1",
     "grade": true,
     "grade_id": "cell-54f742a133353d75",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[92m All public tests passed\n"
     ]
    }
   ],
   "source": [
    "utils.test_base_model(base_model)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "xem_fcVws6Kz"
   },
   "source": [
    "# Define output layers of the model (TODO)\n",
    "\n",
    "You will add output layers to the base model. \n",
    "- The model will need two outputs.\n",
    "\n",
    "One output layer will predict wine quality, which is a numeric value.\n",
    "- Define a `Dense` layer with 1 neuron.\n",
    "- Since this is a regression output, the activation can be left as its default value `None`.\n",
    "\n",
    "The other output layer will predict the wine type, which is either red `1` or not red `0` (white).\n",
    "- Define a `Dense` layer with 1 neuron.\n",
    "- Since there are two possible categories, you can use a sigmoid activation for binary classification.\n",
    "\n",
    "Define the `Model`\n",
    "- Define the `Model` object, and set the following parameters:\n",
    "  - `inputs`: pass in the inputs to the model as a list.\n",
    "  - `outputs`: pass in a list of the outputs that you just defined: wine quality, then wine type.\n",
    "  - **Note**: please list the wine quality before wine type in the outputs, as this will affect the calculated loss if you choose the other order."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "deletable": false,
    "id": "n5UGF8PMVLPt",
    "nbgrader": {
     "cell_type": "code",
     "checksum": "76d35b90d20cdcbb22986cd8211057de",
     "grade": false,
     "grade_id": "cell-19e285f482f021fb",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "## Please uncomment all lines in this cell and replace those marked with `# YOUR CODE HERE`.\n",
    "## You can select all lines in this code cell with Ctrl+A (Windows/Linux) or Cmd+A (Mac), then press Ctrl+/ (Windows/Linux) or Cmd+/ (Mac) to uncomment.\n",
    "\n",
    "\n",
    "\n",
    "def final_model(inputs):\n",
    "    \n",
    "#     # get the base model\n",
    "     x = base_model(inputs)\n",
    "\n",
    "#     # connect the output Dense layer for regression\n",
    "     wine_quality = Dense(units='1', name='wine_quality')(x)\n",
    "\n",
    "#     # connect the output Dense layer for classification. this will use a sigmoid activation.\n",
    "     wine_type = Dense(units='1', activation=\"sigmoid\", name='wine_type')(x)\n",
    "\n",
    "#     # define the model using the input and output layers\n",
    "     model = Model(inputs=[inputs], outputs=[wine_quality,wine_type])\n",
    "\n",
    "     return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "89cbf89d8ab5e2e59ecf7f63f517520a",
     "grade": true,
     "grade_id": "cell-40d050f855c817d1",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[92m All public tests passed\n"
     ]
    }
   ],
   "source": [
    "utils.test_final_model(final_model)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "5R0BMTsltZyu"
   },
   "source": [
    "## Compiling the Model\n",
    "\n",
    "Next, compile the model. When setting the loss parameter of `model.compile`, you're setting the loss for each of the two outputs (wine quality and wine type).\n",
    "\n",
    "To set more than one loss, use a dictionary of key-value pairs.\n",
    "- You can look at the docs for the losses [here](https://www.tensorflow.org/api_docs/python/tf/keras/losses#functions).\n",
    "    - **Note**: For the desired spelling, please look at the \"Functions\" section of the documentation and not the \"classes\" section on that same page.\n",
    "- wine_type: Since you will be performing binary classification on wine type, you should use the binary crossentropy loss function for it.  Please pass this in as a string.  \n",
    "  - **Hint**, this should be all lowercase.  In the documentation, you'll see this under the \"Functions\" section, not the \"Classes\" section.\n",
    "- wine_quality: since this is a regression output, use the mean squared error.  Please pass it in as a string, all lowercase.\n",
    "  - **Hint**: You may notice that there are two aliases for mean squared error.  Please use the shorter name.\n",
    "\n",
    "\n",
    "You will also set the metric for each of the two outputs.  Again, to set metrics for two or more outputs, use a dictionary with key value pairs.\n",
    "- The metrics documentation is linked [here](https://www.tensorflow.org/api_docs/python/tf/keras/metrics).\n",
    "- For the wine type, please set it to accuracy as a string, all lowercase.\n",
    "- For wine quality, please use the root mean squared error.  Instead of a string, you'll set it to an instance of the class [RootMeanSquaredError](https://www.tensorflow.org/api_docs/python/tf/keras/metrics/RootMeanSquaredError), which belongs to the tf.keras.metrics module.\n",
    "\n",
    "**Note**: If you see the error message \n",
    ">Exception: wine quality loss function is incorrect.\n",
    "\n",
    "- Please also check your other losses and metrics, as the error may be caused by the other three key-value pairs and not the wine quality loss."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "deletable": false,
    "id": "LK11duUbUjmh",
    "nbgrader": {
     "cell_type": "code",
     "checksum": "22f45067ca69eb2ccadb43874dbcc27b",
     "grade": false,
     "grade_id": "cell-81afdc4dcca51d5e",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "## Please uncomment all lines in this cell and replace those marked with `# YOUR CODE HERE`.\n",
    "## You can select all lines in this code cell with Ctrl+A (Windows/Linux) or Cmd+A (Mac), then press Ctrl+/ (Windows/Linux) or Cmd+/ (Mac) to uncomment.\n",
    "\n",
    "\n",
    "\n",
    "inputs = tf.keras.layers.Input(shape=(11,))\n",
    "rms = tf.keras.optimizers.RMSprop(lr=0.0001)\n",
    "model = final_model(inputs)\n",
    "model.compile(optimizer=rms, \n",
    "              loss = {'wine_type' : tf.keras.losses.BinaryCrossentropy(),\n",
    "                       'wine_quality' : tf.keras.losses.MeanSquaredError()\n",
    "                      },\n",
    "               metrics = {'wine_type' : tf.keras.metrics.Accuracy(),\n",
    "                          'wine_quality': tf.keras.metrics.RootMeanSquaredError()\n",
    "                        }\n",
    "              )\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "88e02238ea5e456ff65e835cc8158054",
     "grade": true,
     "grade_id": "cell-2eeeba02391c4632",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[92m All public tests passed\n"
     ]
    }
   ],
   "source": [
    "utils.test_model_compile(model)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "90MpAMpWuKm-"
   },
   "source": [
    "## Training the Model\n",
    "\n",
    "Fit the model to the training inputs and outputs. \n",
    "- Check the documentation for [model.fit](https://www.tensorflow.org/api_docs/python/tf/keras/Model#fit).\n",
    "- Remember to use the normalized training set as inputs. \n",
    "- For the validation data, please use the normalized validation set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "deletable": false,
    "id": "_eiZkle4XwiY",
    "nbgrader": {
     "cell_type": "code",
     "checksum": "2ca7664be03bfd6fd3651ae44d17b793",
     "grade": false,
     "grade_id": "cell-0bb56262896f6680",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 3155 samples, validate on 789 samples\n",
      "Epoch 1/180\n",
      "3155/3155 [==============================] - 1s 385us/sample - loss: 22.6199 - wine_quality_loss: 21.8966 - wine_type_loss: 0.6829 - wine_quality_root_mean_squared_error: 4.6837 - wine_type_accuracy: 0.0000e+00 - val_loss: 14.5956 - val_wine_quality_loss: 13.9846 - val_wine_type_loss: 0.6478 - val_wine_quality_root_mean_squared_error: 3.7347 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 2/180\n",
      "3155/3155 [==============================] - 0s 114us/sample - loss: 9.1011 - wine_quality_loss: 8.4819 - wine_type_loss: 0.5947 - wine_quality_root_mean_squared_error: 2.9165 - wine_type_accuracy: 0.0000e+00 - val_loss: 5.2188 - val_wine_quality_loss: 4.7780 - val_wine_type_loss: 0.5435 - val_wine_quality_root_mean_squared_error: 2.1623 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 3/180\n",
      "3155/3155 [==============================] - 0s 117us/sample - loss: 3.8671 - wine_quality_loss: 3.3917 - wine_type_loss: 0.4730 - wine_quality_root_mean_squared_error: 1.8422 - wine_type_accuracy: 0.0000e+00 - val_loss: 3.0225 - val_wine_quality_loss: 2.6856 - val_wine_type_loss: 0.4134 - val_wine_quality_root_mean_squared_error: 1.6153 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 4/180\n",
      "3155/3155 [==============================] - 0s 100us/sample - loss: 2.6385 - wine_quality_loss: 2.2848 - wine_type_loss: 0.3510 - wine_quality_root_mean_squared_error: 1.5124 - wine_type_accuracy: 0.0000e+00 - val_loss: 2.3778 - val_wine_quality_loss: 2.1191 - val_wine_type_loss: 0.3050 - val_wine_quality_root_mean_squared_error: 1.4398 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 5/180\n",
      "3155/3155 [==============================] - 0s 101us/sample - loss: 2.1474 - wine_quality_loss: 1.8826 - wine_type_loss: 0.2620 - wine_quality_root_mean_squared_error: 1.3732 - wine_type_accuracy: 0.0000e+00 - val_loss: 2.0116 - val_wine_quality_loss: 1.8100 - val_wine_type_loss: 0.2316 - val_wine_quality_root_mean_squared_error: 1.3342 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 6/180\n",
      "3155/3155 [==============================] - 0s 98us/sample - loss: 1.8395 - wine_quality_loss: 1.6558 - wine_type_loss: 0.1983 - wine_quality_root_mean_squared_error: 1.2811 - wine_type_accuracy: 0.0000e+00 - val_loss: 1.7517 - val_wine_quality_loss: 1.5915 - val_wine_type_loss: 0.1770 - val_wine_quality_root_mean_squared_error: 1.2549 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 7/180\n",
      "3155/3155 [==============================] - 0s 116us/sample - loss: 1.6323 - wine_quality_loss: 1.4787 - wine_type_loss: 0.1551 - wine_quality_root_mean_squared_error: 1.2153 - wine_type_accuracy: 0.0000e+00 - val_loss: 1.5657 - val_wine_quality_loss: 1.4366 - val_wine_type_loss: 0.1412 - val_wine_quality_root_mean_squared_error: 1.1936 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 8/180\n",
      "3155/3155 [==============================] - 0s 97us/sample - loss: 1.4712 - wine_quality_loss: 1.3432 - wine_type_loss: 0.1253 - wine_quality_root_mean_squared_error: 1.1601 - wine_type_accuracy: 0.0000e+00 - val_loss: 1.4146 - val_wine_quality_loss: 1.3086 - val_wine_type_loss: 0.1142 - val_wine_quality_root_mean_squared_error: 1.1404 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 9/180\n",
      "3155/3155 [==============================] - 0s 98us/sample - loss: 1.3472 - wine_quality_loss: 1.2411 - wine_type_loss: 0.1040 - wine_quality_root_mean_squared_error: 1.1149 - wine_type_accuracy: 0.0000e+00 - val_loss: 1.3004 - val_wine_quality_loss: 1.2093 - val_wine_type_loss: 0.0955 - val_wine_quality_root_mean_squared_error: 1.0977 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 10/180\n",
      "3155/3155 [==============================] - 0s 97us/sample - loss: 1.2367 - wine_quality_loss: 1.1458 - wine_type_loss: 0.0888 - wine_quality_root_mean_squared_error: 1.0715 - wine_type_accuracy: 0.0000e+00 - val_loss: 1.1875 - val_wine_quality_loss: 1.1090 - val_wine_type_loss: 0.0815 - val_wine_quality_root_mean_squared_error: 1.0517 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 11/180\n",
      "3155/3155 [==============================] - 0s 98us/sample - loss: 1.1448 - wine_quality_loss: 1.0656 - wine_type_loss: 0.0776 - wine_quality_root_mean_squared_error: 1.0331 - wine_type_accuracy: 0.0000e+00 - val_loss: 1.1141 - val_wine_quality_loss: 1.0440 - val_wine_type_loss: 0.0711 - val_wine_quality_root_mean_squared_error: 1.0212 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 12/180\n",
      "3155/3155 [==============================] - 0s 96us/sample - loss: 1.0610 - wine_quality_loss: 0.9903 - wine_type_loss: 0.0689 - wine_quality_root_mean_squared_error: 0.9960 - wine_type_accuracy: 0.0000e+00 - val_loss: 1.0161 - val_wine_quality_loss: 0.9536 - val_wine_type_loss: 0.0636 - val_wine_quality_root_mean_squared_error: 0.9760 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 13/180\n",
      "3155/3155 [==============================] - 0s 114us/sample - loss: 0.9894 - wine_quality_loss: 0.9286 - wine_type_loss: 0.0624 - wine_quality_root_mean_squared_error: 0.9628 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.9712 - val_wine_quality_loss: 0.9130 - val_wine_type_loss: 0.0573 - val_wine_quality_root_mean_squared_error: 0.9559 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 14/180\n",
      "3155/3155 [==============================] - 0s 97us/sample - loss: 0.9261 - wine_quality_loss: 0.8695 - wine_type_loss: 0.0573 - wine_quality_root_mean_squared_error: 0.9321 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.8890 - val_wine_quality_loss: 0.8363 - val_wine_type_loss: 0.0526 - val_wine_quality_root_mean_squared_error: 0.9145 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 15/180\n",
      "3155/3155 [==============================] - 0s 96us/sample - loss: 0.8703 - wine_quality_loss: 0.8172 - wine_type_loss: 0.0533 - wine_quality_root_mean_squared_error: 0.9039 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.8314 - val_wine_quality_loss: 0.7821 - val_wine_type_loss: 0.0490 - val_wine_quality_root_mean_squared_error: 0.8845 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 16/180\n",
      "3155/3155 [==============================] - 0s 97us/sample - loss: 0.8157 - wine_quality_loss: 0.7639 - wine_type_loss: 0.0499 - wine_quality_root_mean_squared_error: 0.8750 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.7884 - val_wine_quality_loss: 0.7413 - val_wine_type_loss: 0.0459 - val_wine_quality_root_mean_squared_error: 0.8616 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 17/180\n",
      "3155/3155 [==============================] - 0s 96us/sample - loss: 0.7704 - wine_quality_loss: 0.7227 - wine_type_loss: 0.0472 - wine_quality_root_mean_squared_error: 0.8503 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.7487 - val_wine_quality_loss: 0.7039 - val_wine_type_loss: 0.0435 - val_wine_quality_root_mean_squared_error: 0.8396 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 18/180\n",
      "3155/3155 [==============================] - 0s 96us/sample - loss: 0.7274 - wine_quality_loss: 0.6825 - wine_type_loss: 0.0450 - wine_quality_root_mean_squared_error: 0.8260 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.6988 - val_wine_quality_loss: 0.6563 - val_wine_type_loss: 0.0416 - val_wine_quality_root_mean_squared_error: 0.8105 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 19/180\n",
      "3155/3155 [==============================] - 0s 97us/sample - loss: 0.6923 - wine_quality_loss: 0.6501 - wine_type_loss: 0.0432 - wine_quality_root_mean_squared_error: 0.8056 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.6694 - val_wine_quality_loss: 0.6279 - val_wine_type_loss: 0.0401 - val_wine_quality_root_mean_squared_error: 0.7932 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 20/180\n",
      "3155/3155 [==============================] - 0s 96us/sample - loss: 0.6546 - wine_quality_loss: 0.6158 - wine_type_loss: 0.0418 - wine_quality_root_mean_squared_error: 0.7828 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.6294 - val_wine_quality_loss: 0.5892 - val_wine_type_loss: 0.0389 - val_wine_quality_root_mean_squared_error: 0.7683 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 21/180\n",
      "3155/3155 [==============================] - 0s 114us/sample - loss: 0.6260 - wine_quality_loss: 0.5855 - wine_type_loss: 0.0403 - wine_quality_root_mean_squared_error: 0.7652 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.6033 - val_wine_quality_loss: 0.5644 - val_wine_type_loss: 0.0376 - val_wine_quality_root_mean_squared_error: 0.7519 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 22/180\n",
      "3155/3155 [==============================] - 0s 98us/sample - loss: 0.5950 - wine_quality_loss: 0.5561 - wine_type_loss: 0.0392 - wine_quality_root_mean_squared_error: 0.7455 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.5818 - val_wine_quality_loss: 0.5442 - val_wine_type_loss: 0.0367 - val_wine_quality_root_mean_squared_error: 0.7381 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 23/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.5709 - wine_quality_loss: 0.5321 - wine_type_loss: 0.0381 - wine_quality_root_mean_squared_error: 0.7299 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.5465 - val_wine_quality_loss: 0.5092 - val_wine_type_loss: 0.0359 - val_wine_quality_root_mean_squared_error: 0.7144 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 24/180\n",
      "3155/3155 [==============================] - 0s 98us/sample - loss: 0.5465 - wine_quality_loss: 0.5090 - wine_type_loss: 0.0372 - wine_quality_root_mean_squared_error: 0.7136 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.5260 - val_wine_quality_loss: 0.4892 - val_wine_type_loss: 0.0352 - val_wine_quality_root_mean_squared_error: 0.7003 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 25/180\n",
      "3155/3155 [==============================] - 0s 98us/sample - loss: 0.5254 - wine_quality_loss: 0.4888 - wine_type_loss: 0.0363 - wine_quality_root_mean_squared_error: 0.6994 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.5075 - val_wine_quality_loss: 0.4712 - val_wine_type_loss: 0.0347 - val_wine_quality_root_mean_squared_error: 0.6874 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 26/180\n",
      "3155/3155 [==============================] - 0s 96us/sample - loss: 0.5063 - wine_quality_loss: 0.4699 - wine_type_loss: 0.0369 - wine_quality_root_mean_squared_error: 0.6861 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.4837 - val_wine_quality_loss: 0.4481 - val_wine_type_loss: 0.0341 - val_wine_quality_root_mean_squared_error: 0.6703 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 27/180\n",
      "3155/3155 [==============================] - 0s 97us/sample - loss: 0.4885 - wine_quality_loss: 0.4535 - wine_type_loss: 0.0350 - wine_quality_root_mean_squared_error: 0.6734 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.4673 - val_wine_quality_loss: 0.4319 - val_wine_type_loss: 0.0337 - val_wine_quality_root_mean_squared_error: 0.6582 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 28/180\n",
      "3155/3155 [==============================] - 0s 113us/sample - loss: 0.4717 - wine_quality_loss: 0.4367 - wine_type_loss: 0.0343 - wine_quality_root_mean_squared_error: 0.6614 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.4518 - val_wine_quality_loss: 0.4171 - val_wine_type_loss: 0.0333 - val_wine_quality_root_mean_squared_error: 0.6467 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 29/180\n",
      "3155/3155 [==============================] - 0s 98us/sample - loss: 0.4588 - wine_quality_loss: 0.4244 - wine_type_loss: 0.0337 - wine_quality_root_mean_squared_error: 0.6520 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.4456 - val_wine_quality_loss: 0.4111 - val_wine_type_loss: 0.0329 - val_wine_quality_root_mean_squared_error: 0.6422 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 30/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.4466 - wine_quality_loss: 0.4125 - wine_type_loss: 0.0331 - wine_quality_root_mean_squared_error: 0.6429 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.4302 - val_wine_quality_loss: 0.3958 - val_wine_type_loss: 0.0326 - val_wine_quality_root_mean_squared_error: 0.6303 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 31/180\n",
      "3155/3155 [==============================] - 0s 97us/sample - loss: 0.4339 - wine_quality_loss: 0.4011 - wine_type_loss: 0.0326 - wine_quality_root_mean_squared_error: 0.6334 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.4239 - val_wine_quality_loss: 0.3899 - val_wine_type_loss: 0.0323 - val_wine_quality_root_mean_squared_error: 0.6256 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 32/180\n",
      "3155/3155 [==============================] - 0s 97us/sample - loss: 0.4240 - wine_quality_loss: 0.3907 - wine_type_loss: 0.0322 - wine_quality_root_mean_squared_error: 0.6259 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.4141 - val_wine_quality_loss: 0.3805 - val_wine_type_loss: 0.0320 - val_wine_quality_root_mean_squared_error: 0.6179 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 33/180\n",
      "3155/3155 [==============================] - 0s 97us/sample - loss: 0.4133 - wine_quality_loss: 0.3814 - wine_type_loss: 0.0318 - wine_quality_root_mean_squared_error: 0.6175 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.4082 - val_wine_quality_loss: 0.3746 - val_wine_type_loss: 0.0318 - val_wine_quality_root_mean_squared_error: 0.6132 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 34/180\n",
      "3155/3155 [==============================] - 0s 96us/sample - loss: 0.4065 - wine_quality_loss: 0.3755 - wine_type_loss: 0.0314 - wine_quality_root_mean_squared_error: 0.6123 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3970 - val_wine_quality_loss: 0.3637 - val_wine_type_loss: 0.0316 - val_wine_quality_root_mean_squared_error: 0.6043 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 35/180\n",
      "3155/3155 [==============================] - 0s 114us/sample - loss: 0.3991 - wine_quality_loss: 0.3673 - wine_type_loss: 0.0310 - wine_quality_root_mean_squared_error: 0.6066 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3971 - val_wine_quality_loss: 0.3639 - val_wine_type_loss: 0.0314 - val_wine_quality_root_mean_squared_error: 0.6044 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 36/180\n",
      "3155/3155 [==============================] - 0s 96us/sample - loss: 0.3936 - wine_quality_loss: 0.3624 - wine_type_loss: 0.0306 - wine_quality_root_mean_squared_error: 0.6024 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3822 - val_wine_quality_loss: 0.3494 - val_wine_type_loss: 0.0313 - val_wine_quality_root_mean_squared_error: 0.5921 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 37/180\n",
      "3155/3155 [==============================] - 0s 97us/sample - loss: 0.3850 - wine_quality_loss: 0.3544 - wine_type_loss: 0.0303 - wine_quality_root_mean_squared_error: 0.5955 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3841 - val_wine_quality_loss: 0.3511 - val_wine_type_loss: 0.0311 - val_wine_quality_root_mean_squared_error: 0.5938 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 38/180\n",
      "3155/3155 [==============================] - 0s 96us/sample - loss: 0.3811 - wine_quality_loss: 0.3516 - wine_type_loss: 0.0300 - wine_quality_root_mean_squared_error: 0.5925 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3945 - val_wine_quality_loss: 0.3617 - val_wine_type_loss: 0.0309 - val_wine_quality_root_mean_squared_error: 0.6027 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 39/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.3760 - wine_quality_loss: 0.3461 - wine_type_loss: 0.0297 - wine_quality_root_mean_squared_error: 0.5884 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3773 - val_wine_quality_loss: 0.3450 - val_wine_type_loss: 0.0308 - val_wine_quality_root_mean_squared_error: 0.5883 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 40/180\n",
      "3155/3155 [==============================] - 0s 98us/sample - loss: 0.3719 - wine_quality_loss: 0.3427 - wine_type_loss: 0.0293 - wine_quality_root_mean_squared_error: 0.5852 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3673 - val_wine_quality_loss: 0.3352 - val_wine_type_loss: 0.0307 - val_wine_quality_root_mean_squared_error: 0.5799 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 41/180\n",
      "3155/3155 [==============================] - 0s 97us/sample - loss: 0.3688 - wine_quality_loss: 0.3391 - wine_type_loss: 0.0292 - wine_quality_root_mean_squared_error: 0.5828 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3686 - val_wine_quality_loss: 0.3367 - val_wine_type_loss: 0.0305 - val_wine_quality_root_mean_squared_error: 0.5811 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 42/180\n",
      "3155/3155 [==============================] - 0s 99us/sample - loss: 0.3652 - wine_quality_loss: 0.3361 - wine_type_loss: 0.0288 - wine_quality_root_mean_squared_error: 0.5799 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3679 - val_wine_quality_loss: 0.3359 - val_wine_type_loss: 0.0305 - val_wine_quality_root_mean_squared_error: 0.5805 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 43/180\n",
      "3155/3155 [==============================] - 0s 112us/sample - loss: 0.3626 - wine_quality_loss: 0.3336 - wine_type_loss: 0.0286 - wine_quality_root_mean_squared_error: 0.5778 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3622 - val_wine_quality_loss: 0.3304 - val_wine_type_loss: 0.0304 - val_wine_quality_root_mean_squared_error: 0.5758 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 44/180\n",
      "3155/3155 [==============================] - 0s 99us/sample - loss: 0.3599 - wine_quality_loss: 0.3312 - wine_type_loss: 0.0283 - wine_quality_root_mean_squared_error: 0.5758 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3632 - val_wine_quality_loss: 0.3314 - val_wine_type_loss: 0.0302 - val_wine_quality_root_mean_squared_error: 0.5768 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 45/180\n",
      "3155/3155 [==============================] - 0s 96us/sample - loss: 0.3564 - wine_quality_loss: 0.3279 - wine_type_loss: 0.0282 - wine_quality_root_mean_squared_error: 0.5730 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3614 - val_wine_quality_loss: 0.3298 - val_wine_type_loss: 0.0301 - val_wine_quality_root_mean_squared_error: 0.5752 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 46/180\n",
      "3155/3155 [==============================] - 0s 96us/sample - loss: 0.3546 - wine_quality_loss: 0.3268 - wine_type_loss: 0.0277 - wine_quality_root_mean_squared_error: 0.5716 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3556 - val_wine_quality_loss: 0.3243 - val_wine_type_loss: 0.0300 - val_wine_quality_root_mean_squared_error: 0.5704 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 47/180\n",
      "3155/3155 [==============================] - 0s 96us/sample - loss: 0.3509 - wine_quality_loss: 0.3236 - wine_type_loss: 0.0276 - wine_quality_root_mean_squared_error: 0.5685 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3581 - val_wine_quality_loss: 0.3266 - val_wine_type_loss: 0.0299 - val_wine_quality_root_mean_squared_error: 0.5726 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 48/180\n",
      "3155/3155 [==============================] - 0s 97us/sample - loss: 0.3505 - wine_quality_loss: 0.3230 - wine_type_loss: 0.0276 - wine_quality_root_mean_squared_error: 0.5683 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3544 - val_wine_quality_loss: 0.3229 - val_wine_type_loss: 0.0299 - val_wine_quality_root_mean_squared_error: 0.5693 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 49/180\n",
      "3155/3155 [==============================] - 0s 97us/sample - loss: 0.3486 - wine_quality_loss: 0.3213 - wine_type_loss: 0.0272 - wine_quality_root_mean_squared_error: 0.5668 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3522 - val_wine_quality_loss: 0.3210 - val_wine_type_loss: 0.0298 - val_wine_quality_root_mean_squared_error: 0.5675 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 50/180\n",
      "3155/3155 [==============================] - 0s 96us/sample - loss: 0.3459 - wine_quality_loss: 0.3187 - wine_type_loss: 0.0270 - wine_quality_root_mean_squared_error: 0.5646 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3580 - val_wine_quality_loss: 0.3268 - val_wine_type_loss: 0.0297 - val_wine_quality_root_mean_squared_error: 0.5727 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 51/180\n",
      "3155/3155 [==============================] - 0s 96us/sample - loss: 0.3440 - wine_quality_loss: 0.3171 - wine_type_loss: 0.0268 - wine_quality_root_mean_squared_error: 0.5632 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3506 - val_wine_quality_loss: 0.3196 - val_wine_type_loss: 0.0295 - val_wine_quality_root_mean_squared_error: 0.5663 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 52/180\n",
      "3155/3155 [==============================] - 0s 112us/sample - loss: 0.3436 - wine_quality_loss: 0.3171 - wine_type_loss: 0.0266 - wine_quality_root_mean_squared_error: 0.5629 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3501 - val_wine_quality_loss: 0.3192 - val_wine_type_loss: 0.0295 - val_wine_quality_root_mean_squared_error: 0.5659 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 53/180\n",
      "3155/3155 [==============================] - 0s 99us/sample - loss: 0.3403 - wine_quality_loss: 0.3134 - wine_type_loss: 0.0265 - wine_quality_root_mean_squared_error: 0.5602 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3490 - val_wine_quality_loss: 0.3183 - val_wine_type_loss: 0.0294 - val_wine_quality_root_mean_squared_error: 0.5650 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 54/180\n",
      "3155/3155 [==============================] - 0s 97us/sample - loss: 0.3397 - wine_quality_loss: 0.3131 - wine_type_loss: 0.0263 - wine_quality_root_mean_squared_error: 0.5598 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3471 - val_wine_quality_loss: 0.3163 - val_wine_type_loss: 0.0294 - val_wine_quality_root_mean_squared_error: 0.5633 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 55/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.3384 - wine_quality_loss: 0.3123 - wine_type_loss: 0.0261 - wine_quality_root_mean_squared_error: 0.5588 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3542 - val_wine_quality_loss: 0.3235 - val_wine_type_loss: 0.0294 - val_wine_quality_root_mean_squared_error: 0.5697 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 56/180\n",
      "3155/3155 [==============================] - 0s 97us/sample - loss: 0.3358 - wine_quality_loss: 0.3100 - wine_type_loss: 0.0258 - wine_quality_root_mean_squared_error: 0.5567 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3536 - val_wine_quality_loss: 0.3229 - val_wine_type_loss: 0.0292 - val_wine_quality_root_mean_squared_error: 0.5692 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 57/180\n",
      "3155/3155 [==============================] - 0s 97us/sample - loss: 0.3359 - wine_quality_loss: 0.3102 - wine_type_loss: 0.0258 - wine_quality_root_mean_squared_error: 0.5569 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3462 - val_wine_quality_loss: 0.3159 - val_wine_type_loss: 0.0291 - val_wine_quality_root_mean_squared_error: 0.5628 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 58/180\n",
      "3155/3155 [==============================] - 0s 126us/sample - loss: 0.3319 - wine_quality_loss: 0.3058 - wine_type_loss: 0.0256 - wine_quality_root_mean_squared_error: 0.5534 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3663 - val_wine_quality_loss: 0.3357 - val_wine_type_loss: 0.0291 - val_wine_quality_root_mean_squared_error: 0.5804 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 59/180\n",
      "3155/3155 [==============================] - 0s 101us/sample - loss: 0.3320 - wine_quality_loss: 0.3067 - wine_type_loss: 0.0255 - wine_quality_root_mean_squared_error: 0.5537 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3521 - val_wine_quality_loss: 0.3217 - val_wine_type_loss: 0.0290 - val_wine_quality_root_mean_squared_error: 0.5681 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 60/180\n",
      "3155/3155 [==============================] - 0s 112us/sample - loss: 0.3303 - wine_quality_loss: 0.3053 - wine_type_loss: 0.0252 - wine_quality_root_mean_squared_error: 0.5523 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3499 - val_wine_quality_loss: 0.3196 - val_wine_type_loss: 0.0290 - val_wine_quality_root_mean_squared_error: 0.5662 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 61/180\n",
      "3155/3155 [==============================] - 0s 97us/sample - loss: 0.3303 - wine_quality_loss: 0.3052 - wine_type_loss: 0.0250 - wine_quality_root_mean_squared_error: 0.5525 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3586 - val_wine_quality_loss: 0.3283 - val_wine_type_loss: 0.0289 - val_wine_quality_root_mean_squared_error: 0.5738 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 62/180\n",
      "3155/3155 [==============================] - 0s 97us/sample - loss: 0.3285 - wine_quality_loss: 0.3036 - wine_type_loss: 0.0252 - wine_quality_root_mean_squared_error: 0.5509 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3513 - val_wine_quality_loss: 0.3210 - val_wine_type_loss: 0.0288 - val_wine_quality_root_mean_squared_error: 0.5676 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 63/180\n",
      "3155/3155 [==============================] - 0s 96us/sample - loss: 0.3277 - wine_quality_loss: 0.3033 - wine_type_loss: 0.0271 - wine_quality_root_mean_squared_error: 0.5504 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3515 - val_wine_quality_loss: 0.3215 - val_wine_type_loss: 0.0287 - val_wine_quality_root_mean_squared_error: 0.5678 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 64/180\n",
      "3155/3155 [==============================] - 0s 97us/sample - loss: 0.3276 - wine_quality_loss: 0.3028 - wine_type_loss: 0.0245 - wine_quality_root_mean_squared_error: 0.5504 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3430 - val_wine_quality_loss: 0.3131 - val_wine_type_loss: 0.0287 - val_wine_quality_root_mean_squared_error: 0.5603 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 65/180\n",
      "3155/3155 [==============================] - 0s 98us/sample - loss: 0.3268 - wine_quality_loss: 0.3022 - wine_type_loss: 0.0244 - wine_quality_root_mean_squared_error: 0.5498 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3419 - val_wine_quality_loss: 0.3120 - val_wine_type_loss: 0.0287 - val_wine_quality_root_mean_squared_error: 0.5593 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 66/180\n",
      "3155/3155 [==============================] - 0s 97us/sample - loss: 0.3253 - wine_quality_loss: 0.3011 - wine_type_loss: 0.0242 - wine_quality_root_mean_squared_error: 0.5486 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3422 - val_wine_quality_loss: 0.3124 - val_wine_type_loss: 0.0287 - val_wine_quality_root_mean_squared_error: 0.5596 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 67/180\n",
      "3155/3155 [==============================] - 0s 114us/sample - loss: 0.3247 - wine_quality_loss: 0.3011 - wine_type_loss: 0.0245 - wine_quality_root_mean_squared_error: 0.5482 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3424 - val_wine_quality_loss: 0.3124 - val_wine_type_loss: 0.0288 - val_wine_quality_root_mean_squared_error: 0.5597 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 68/180\n",
      "3155/3155 [==============================] - 0s 98us/sample - loss: 0.3227 - wine_quality_loss: 0.2985 - wine_type_loss: 0.0241 - wine_quality_root_mean_squared_error: 0.5464 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3481 - val_wine_quality_loss: 0.3184 - val_wine_type_loss: 0.0285 - val_wine_quality_root_mean_squared_error: 0.5650 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 69/180\n",
      "3155/3155 [==============================] - 0s 97us/sample - loss: 0.3224 - wine_quality_loss: 0.2985 - wine_type_loss: 0.0238 - wine_quality_root_mean_squared_error: 0.5464 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3414 - val_wine_quality_loss: 0.3115 - val_wine_type_loss: 0.0285 - val_wine_quality_root_mean_squared_error: 0.5591 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 70/180\n",
      "3155/3155 [==============================] - 0s 97us/sample - loss: 0.3199 - wine_quality_loss: 0.2962 - wine_type_loss: 0.0237 - wine_quality_root_mean_squared_error: 0.5442 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3406 - val_wine_quality_loss: 0.3109 - val_wine_type_loss: 0.0285 - val_wine_quality_root_mean_squared_error: 0.5583 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 71/180\n",
      "3155/3155 [==============================] - 0s 98us/sample - loss: 0.3204 - wine_quality_loss: 0.2968 - wine_type_loss: 0.0235 - wine_quality_root_mean_squared_error: 0.5448 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3420 - val_wine_quality_loss: 0.3124 - val_wine_type_loss: 0.0285 - val_wine_quality_root_mean_squared_error: 0.5596 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 72/180\n",
      "3155/3155 [==============================] - 0s 112us/sample - loss: 0.3195 - wine_quality_loss: 0.2958 - wine_type_loss: 0.0234 - wine_quality_root_mean_squared_error: 0.5441 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3550 - val_wine_quality_loss: 0.3251 - val_wine_type_loss: 0.0285 - val_wine_quality_root_mean_squared_error: 0.5710 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 73/180\n",
      "3155/3155 [==============================] - 0s 97us/sample - loss: 0.3189 - wine_quality_loss: 0.2953 - wine_type_loss: 0.0234 - wine_quality_root_mean_squared_error: 0.5436 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3398 - val_wine_quality_loss: 0.3103 - val_wine_type_loss: 0.0285 - val_wine_quality_root_mean_squared_error: 0.5577 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 74/180\n",
      "3155/3155 [==============================] - 0s 97us/sample - loss: 0.3186 - wine_quality_loss: 0.2953 - wine_type_loss: 0.0232 - wine_quality_root_mean_squared_error: 0.5435 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3430 - val_wine_quality_loss: 0.3133 - val_wine_type_loss: 0.0283 - val_wine_quality_root_mean_squared_error: 0.5607 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 75/180\n",
      "3155/3155 [==============================] - 0s 98us/sample - loss: 0.3168 - wine_quality_loss: 0.2931 - wine_type_loss: 0.0231 - wine_quality_root_mean_squared_error: 0.5419 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3398 - val_wine_quality_loss: 0.3101 - val_wine_type_loss: 0.0283 - val_wine_quality_root_mean_squared_error: 0.5578 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 76/180\n",
      "3155/3155 [==============================] - 0s 99us/sample - loss: 0.3166 - wine_quality_loss: 0.2935 - wine_type_loss: 0.0229 - wine_quality_root_mean_squared_error: 0.5419 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3446 - val_wine_quality_loss: 0.3151 - val_wine_type_loss: 0.0282 - val_wine_quality_root_mean_squared_error: 0.5622 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 77/180\n",
      "3155/3155 [==============================] - 0s 100us/sample - loss: 0.3169 - wine_quality_loss: 0.2939 - wine_type_loss: 0.0227 - wine_quality_root_mean_squared_error: 0.5423 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3392 - val_wine_quality_loss: 0.3098 - val_wine_type_loss: 0.0282 - val_wine_quality_root_mean_squared_error: 0.5573 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 78/180\n",
      "3155/3155 [==============================] - 0s 101us/sample - loss: 0.3150 - wine_quality_loss: 0.2918 - wine_type_loss: 0.0226 - wine_quality_root_mean_squared_error: 0.5406 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3436 - val_wine_quality_loss: 0.3143 - val_wine_type_loss: 0.0282 - val_wine_quality_root_mean_squared_error: 0.5613 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 79/180\n",
      "3155/3155 [==============================] - 0s 96us/sample - loss: 0.3140 - wine_quality_loss: 0.2916 - wine_type_loss: 0.0225 - wine_quality_root_mean_squared_error: 0.5399 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3449 - val_wine_quality_loss: 0.3152 - val_wine_type_loss: 0.0281 - val_wine_quality_root_mean_squared_error: 0.5625 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 80/180\n",
      "3155/3155 [==============================] - 0s 99us/sample - loss: 0.3125 - wine_quality_loss: 0.2893 - wine_type_loss: 0.0236 - wine_quality_root_mean_squared_error: 0.5386 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3440 - val_wine_quality_loss: 0.3145 - val_wine_type_loss: 0.0282 - val_wine_quality_root_mean_squared_error: 0.5617 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 81/180\n",
      "3155/3155 [==============================] - 0s 99us/sample - loss: 0.3121 - wine_quality_loss: 0.2892 - wine_type_loss: 0.0222 - wine_quality_root_mean_squared_error: 0.5383 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3443 - val_wine_quality_loss: 0.3153 - val_wine_type_loss: 0.0279 - val_wine_quality_root_mean_squared_error: 0.5622 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 82/180\n",
      "3155/3155 [==============================] - 0s 113us/sample - loss: 0.3114 - wine_quality_loss: 0.2889 - wine_type_loss: 0.0222 - wine_quality_root_mean_squared_error: 0.5377 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3406 - val_wine_quality_loss: 0.3114 - val_wine_type_loss: 0.0282 - val_wine_quality_root_mean_squared_error: 0.5586 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 83/180\n",
      "3155/3155 [==============================] - 0s 97us/sample - loss: 0.3103 - wine_quality_loss: 0.2880 - wine_type_loss: 0.0220 - wine_quality_root_mean_squared_error: 0.5368 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3358 - val_wine_quality_loss: 0.3067 - val_wine_type_loss: 0.0280 - val_wine_quality_root_mean_squared_error: 0.5545 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 84/180\n",
      "3155/3155 [==============================] - 0s 97us/sample - loss: 0.3094 - wine_quality_loss: 0.2876 - wine_type_loss: 0.0218 - wine_quality_root_mean_squared_error: 0.5362 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3375 - val_wine_quality_loss: 0.3083 - val_wine_type_loss: 0.0280 - val_wine_quality_root_mean_squared_error: 0.5559 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 85/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.3084 - wine_quality_loss: 0.2867 - wine_type_loss: 0.0217 - wine_quality_root_mean_squared_error: 0.5354 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3375 - val_wine_quality_loss: 0.3084 - val_wine_type_loss: 0.0279 - val_wine_quality_root_mean_squared_error: 0.5561 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 86/180\n",
      "3155/3155 [==============================] - 0s 98us/sample - loss: 0.3083 - wine_quality_loss: 0.2865 - wine_type_loss: 0.0216 - wine_quality_root_mean_squared_error: 0.5353 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3366 - val_wine_quality_loss: 0.3077 - val_wine_type_loss: 0.0279 - val_wine_quality_root_mean_squared_error: 0.5553 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 87/180\n",
      "3155/3155 [==============================] - 0s 98us/sample - loss: 0.3077 - wine_quality_loss: 0.2859 - wine_type_loss: 0.0215 - wine_quality_root_mean_squared_error: 0.5349 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3390 - val_wine_quality_loss: 0.3100 - val_wine_type_loss: 0.0277 - val_wine_quality_root_mean_squared_error: 0.5575 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 88/180\n",
      "3155/3155 [==============================] - 0s 97us/sample - loss: 0.3070 - wine_quality_loss: 0.2857 - wine_type_loss: 0.0214 - wine_quality_root_mean_squared_error: 0.5344 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3392 - val_wine_quality_loss: 0.3106 - val_wine_type_loss: 0.0278 - val_wine_quality_root_mean_squared_error: 0.5577 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 89/180\n",
      "3155/3155 [==============================] - 0s 113us/sample - loss: 0.3071 - wine_quality_loss: 0.2853 - wine_type_loss: 0.0212 - wine_quality_root_mean_squared_error: 0.5347 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3491 - val_wine_quality_loss: 0.3204 - val_wine_type_loss: 0.0277 - val_wine_quality_root_mean_squared_error: 0.5666 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 90/180\n",
      "3155/3155 [==============================] - 0s 99us/sample - loss: 0.3062 - wine_quality_loss: 0.2855 - wine_type_loss: 0.0212 - wine_quality_root_mean_squared_error: 0.5338 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3383 - val_wine_quality_loss: 0.3093 - val_wine_type_loss: 0.0278 - val_wine_quality_root_mean_squared_error: 0.5569 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 91/180\n",
      "3155/3155 [==============================] - 0s 100us/sample - loss: 0.3048 - wine_quality_loss: 0.2836 - wine_type_loss: 0.0211 - wine_quality_root_mean_squared_error: 0.5326 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3367 - val_wine_quality_loss: 0.3079 - val_wine_type_loss: 0.0277 - val_wine_quality_root_mean_squared_error: 0.5556 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 92/180\n",
      "3155/3155 [==============================] - 0s 97us/sample - loss: 0.3056 - wine_quality_loss: 0.2842 - wine_type_loss: 0.0210 - wine_quality_root_mean_squared_error: 0.5335 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3354 - val_wine_quality_loss: 0.3065 - val_wine_type_loss: 0.0276 - val_wine_quality_root_mean_squared_error: 0.5545 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 93/180\n",
      "3155/3155 [==============================] - 0s 114us/sample - loss: 0.3048 - wine_quality_loss: 0.2842 - wine_type_loss: 0.0208 - wine_quality_root_mean_squared_error: 0.5328 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3366 - val_wine_quality_loss: 0.3080 - val_wine_type_loss: 0.0275 - val_wine_quality_root_mean_squared_error: 0.5557 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 94/180\n",
      "3155/3155 [==============================] - 0s 98us/sample - loss: 0.3036 - wine_quality_loss: 0.2826 - wine_type_loss: 0.0207 - wine_quality_root_mean_squared_error: 0.5319 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3396 - val_wine_quality_loss: 0.3109 - val_wine_type_loss: 0.0275 - val_wine_quality_root_mean_squared_error: 0.5584 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 95/180\n",
      "3155/3155 [==============================] - 0s 98us/sample - loss: 0.3030 - wine_quality_loss: 0.2827 - wine_type_loss: 0.0208 - wine_quality_root_mean_squared_error: 0.5313 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3358 - val_wine_quality_loss: 0.3071 - val_wine_type_loss: 0.0275 - val_wine_quality_root_mean_squared_error: 0.5549 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 96/180\n",
      "3155/3155 [==============================] - 0s 97us/sample - loss: 0.3013 - wine_quality_loss: 0.2805 - wine_type_loss: 0.0205 - wine_quality_root_mean_squared_error: 0.5298 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3369 - val_wine_quality_loss: 0.3084 - val_wine_type_loss: 0.0275 - val_wine_quality_root_mean_squared_error: 0.5560 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 97/180\n",
      "3155/3155 [==============================] - 0s 98us/sample - loss: 0.3032 - wine_quality_loss: 0.2826 - wine_type_loss: 0.0205 - wine_quality_root_mean_squared_error: 0.5317 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3392 - val_wine_quality_loss: 0.3107 - val_wine_type_loss: 0.0275 - val_wine_quality_root_mean_squared_error: 0.5580 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 98/180\n",
      "3155/3155 [==============================] - 0s 113us/sample - loss: 0.3018 - wine_quality_loss: 0.2811 - wine_type_loss: 0.0202 - wine_quality_root_mean_squared_error: 0.5305 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3419 - val_wine_quality_loss: 0.3130 - val_wine_type_loss: 0.0274 - val_wine_quality_root_mean_squared_error: 0.5604 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 99/180\n",
      "3155/3155 [==============================] - 0s 99us/sample - loss: 0.3007 - wine_quality_loss: 0.2803 - wine_type_loss: 0.0203 - wine_quality_root_mean_squared_error: 0.5295 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3387 - val_wine_quality_loss: 0.3100 - val_wine_type_loss: 0.0273 - val_wine_quality_root_mean_squared_error: 0.5577 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 100/180\n",
      "3155/3155 [==============================] - 0s 97us/sample - loss: 0.2984 - wine_quality_loss: 0.2783 - wine_type_loss: 0.0200 - wine_quality_root_mean_squared_error: 0.5275 - wine_type_accuracy: 0.0000e+00 - val_loss: 0.3427 - val_wine_quality_loss: 0.3142 - val_wine_type_loss: 0.0274 - val_wine_quality_root_mean_squared_error: 0.5612 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 101/180\n",
      "3155/3155 [==============================] - 0s 100us/sample - loss: 0.2998 - wine_quality_loss: 0.2796 - wine_type_loss: 0.0210 - wine_quality_root_mean_squared_error: 0.5290 - wine_type_accuracy: 3.1696e-04 - val_loss: 0.3414 - val_wine_quality_loss: 0.3131 - val_wine_type_loss: 0.0271 - val_wine_quality_root_mean_squared_error: 0.5603 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 102/180\n",
      "3155/3155 [==============================] - 0s 97us/sample - loss: 0.2998 - wine_quality_loss: 0.2802 - wine_type_loss: 0.0199 - wine_quality_root_mean_squared_error: 0.5290 - wine_type_accuracy: 3.1696e-04 - val_loss: 0.3404 - val_wine_quality_loss: 0.3122 - val_wine_type_loss: 0.0272 - val_wine_quality_root_mean_squared_error: 0.5593 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 103/180\n",
      "3155/3155 [==============================] - 0s 96us/sample - loss: 0.2969 - wine_quality_loss: 0.2769 - wine_type_loss: 0.0198 - wine_quality_root_mean_squared_error: 0.5263 - wine_type_accuracy: 3.1696e-04 - val_loss: 0.3445 - val_wine_quality_loss: 0.3161 - val_wine_type_loss: 0.0273 - val_wine_quality_root_mean_squared_error: 0.5629 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 104/180\n",
      "3155/3155 [==============================] - 0s 113us/sample - loss: 0.2980 - wine_quality_loss: 0.2778 - wine_type_loss: 0.0197 - wine_quality_root_mean_squared_error: 0.5275 - wine_type_accuracy: 3.1696e-04 - val_loss: 0.3446 - val_wine_quality_loss: 0.3163 - val_wine_type_loss: 0.0272 - val_wine_quality_root_mean_squared_error: 0.5631 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 105/180\n",
      "3155/3155 [==============================] - 0s 98us/sample - loss: 0.2978 - wine_quality_loss: 0.2777 - wine_type_loss: 0.0196 - wine_quality_root_mean_squared_error: 0.5274 - wine_type_accuracy: 3.1696e-04 - val_loss: 0.3341 - val_wine_quality_loss: 0.3059 - val_wine_type_loss: 0.0272 - val_wine_quality_root_mean_squared_error: 0.5537 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 106/180\n",
      "3155/3155 [==============================] - 0s 97us/sample - loss: 0.2962 - wine_quality_loss: 0.2767 - wine_type_loss: 0.0195 - wine_quality_root_mean_squared_error: 0.5259 - wine_type_accuracy: 6.3391e-04 - val_loss: 0.3352 - val_wine_quality_loss: 0.3070 - val_wine_type_loss: 0.0272 - val_wine_quality_root_mean_squared_error: 0.5547 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 107/180\n",
      "3155/3155 [==============================] - 0s 98us/sample - loss: 0.2964 - wine_quality_loss: 0.2767 - wine_type_loss: 0.0207 - wine_quality_root_mean_squared_error: 0.5262 - wine_type_accuracy: 3.1696e-04 - val_loss: 0.3360 - val_wine_quality_loss: 0.3079 - val_wine_type_loss: 0.0271 - val_wine_quality_root_mean_squared_error: 0.5555 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 108/180\n",
      "3155/3155 [==============================] - 0s 98us/sample - loss: 0.2961 - wine_quality_loss: 0.2774 - wine_type_loss: 0.0193 - wine_quality_root_mean_squared_error: 0.5261 - wine_type_accuracy: 6.3391e-04 - val_loss: 0.3326 - val_wine_quality_loss: 0.3043 - val_wine_type_loss: 0.0271 - val_wine_quality_root_mean_squared_error: 0.5524 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 109/180\n",
      "3155/3155 [==============================] - 0s 117us/sample - loss: 0.2953 - wine_quality_loss: 0.2766 - wine_type_loss: 0.0192 - wine_quality_root_mean_squared_error: 0.5254 - wine_type_accuracy: 3.1696e-04 - val_loss: 0.3434 - val_wine_quality_loss: 0.3151 - val_wine_type_loss: 0.0272 - val_wine_quality_root_mean_squared_error: 0.5620 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 110/180\n",
      "3155/3155 [==============================] - 0s 99us/sample - loss: 0.2955 - wine_quality_loss: 0.2763 - wine_type_loss: 0.0192 - wine_quality_root_mean_squared_error: 0.5256 - wine_type_accuracy: 6.3391e-04 - val_loss: 0.3345 - val_wine_quality_loss: 0.3062 - val_wine_type_loss: 0.0271 - val_wine_quality_root_mean_squared_error: 0.5541 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 111/180\n",
      "3155/3155 [==============================] - 0s 99us/sample - loss: 0.2954 - wine_quality_loss: 0.2764 - wine_type_loss: 0.0191 - wine_quality_root_mean_squared_error: 0.5255 - wine_type_accuracy: 6.3391e-04 - val_loss: 0.3330 - val_wine_quality_loss: 0.3047 - val_wine_type_loss: 0.0272 - val_wine_quality_root_mean_squared_error: 0.5527 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 112/180\n",
      "3155/3155 [==============================] - 0s 114us/sample - loss: 0.2943 - wine_quality_loss: 0.2752 - wine_type_loss: 0.0190 - wine_quality_root_mean_squared_error: 0.5247 - wine_type_accuracy: 6.3391e-04 - val_loss: 0.3386 - val_wine_quality_loss: 0.3104 - val_wine_type_loss: 0.0272 - val_wine_quality_root_mean_squared_error: 0.5578 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 113/180\n",
      "3155/3155 [==============================] - 0s 101us/sample - loss: 0.2938 - wine_quality_loss: 0.2751 - wine_type_loss: 0.0189 - wine_quality_root_mean_squared_error: 0.5243 - wine_type_accuracy: 6.3391e-04 - val_loss: 0.3354 - val_wine_quality_loss: 0.3075 - val_wine_type_loss: 0.0270 - val_wine_quality_root_mean_squared_error: 0.5550 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 114/180\n",
      "3155/3155 [==============================] - 0s 98us/sample - loss: 0.2927 - wine_quality_loss: 0.2735 - wine_type_loss: 0.0188 - wine_quality_root_mean_squared_error: 0.5233 - wine_type_accuracy: 6.3391e-04 - val_loss: 0.3349 - val_wine_quality_loss: 0.3069 - val_wine_type_loss: 0.0270 - val_wine_quality_root_mean_squared_error: 0.5546 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 115/180\n",
      "3155/3155 [==============================] - 0s 99us/sample - loss: 0.2927 - wine_quality_loss: 0.2736 - wine_type_loss: 0.0188 - wine_quality_root_mean_squared_error: 0.5234 - wine_type_accuracy: 6.3391e-04 - val_loss: 0.3397 - val_wine_quality_loss: 0.3116 - val_wine_type_loss: 0.0269 - val_wine_quality_root_mean_squared_error: 0.5589 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 116/180\n",
      "3155/3155 [==============================] - 0s 118us/sample - loss: 0.2923 - wine_quality_loss: 0.2732 - wine_type_loss: 0.0196 - wine_quality_root_mean_squared_error: 0.5230 - wine_type_accuracy: 9.5087e-04 - val_loss: 0.3401 - val_wine_quality_loss: 0.3121 - val_wine_type_loss: 0.0269 - val_wine_quality_root_mean_squared_error: 0.5594 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 117/180\n",
      "3155/3155 [==============================] - 0s 100us/sample - loss: 0.2920 - wine_quality_loss: 0.2740 - wine_type_loss: 0.0185 - wine_quality_root_mean_squared_error: 0.5228 - wine_type_accuracy: 0.0019 - val_loss: 0.3317 - val_wine_quality_loss: 0.3037 - val_wine_type_loss: 0.0270 - val_wine_quality_root_mean_squared_error: 0.5517 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 118/180\n",
      "3155/3155 [==============================] - 0s 98us/sample - loss: 0.2913 - wine_quality_loss: 0.2725 - wine_type_loss: 0.0187 - wine_quality_root_mean_squared_error: 0.5222 - wine_type_accuracy: 6.3391e-04 - val_loss: 0.3347 - val_wine_quality_loss: 0.3065 - val_wine_type_loss: 0.0269 - val_wine_quality_root_mean_squared_error: 0.5545 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 119/180\n",
      "3155/3155 [==============================] - 0s 114us/sample - loss: 0.2909 - wine_quality_loss: 0.2727 - wine_type_loss: 0.0184 - wine_quality_root_mean_squared_error: 0.5219 - wine_type_accuracy: 0.0022 - val_loss: 0.3368 - val_wine_quality_loss: 0.3090 - val_wine_type_loss: 0.0268 - val_wine_quality_root_mean_squared_error: 0.5565 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 120/180\n",
      "3155/3155 [==============================] - 0s 100us/sample - loss: 0.2909 - wine_quality_loss: 0.2727 - wine_type_loss: 0.0185 - wine_quality_root_mean_squared_error: 0.5220 - wine_type_accuracy: 6.3391e-04 - val_loss: 0.3363 - val_wine_quality_loss: 0.3087 - val_wine_type_loss: 0.0267 - val_wine_quality_root_mean_squared_error: 0.5561 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 121/180\n",
      "3155/3155 [==============================] - 0s 100us/sample - loss: 0.2901 - wine_quality_loss: 0.2713 - wine_type_loss: 0.0182 - wine_quality_root_mean_squared_error: 0.5213 - wine_type_accuracy: 0.0022 - val_loss: 0.3322 - val_wine_quality_loss: 0.3043 - val_wine_type_loss: 0.0268 - val_wine_quality_root_mean_squared_error: 0.5523 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 122/180\n",
      "3155/3155 [==============================] - 0s 100us/sample - loss: 0.2893 - wine_quality_loss: 0.2708 - wine_type_loss: 0.0182 - wine_quality_root_mean_squared_error: 0.5206 - wine_type_accuracy: 0.0022 - val_loss: 0.3380 - val_wine_quality_loss: 0.3101 - val_wine_type_loss: 0.0268 - val_wine_quality_root_mean_squared_error: 0.5576 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 123/180\n",
      "3155/3155 [==============================] - 0s 114us/sample - loss: 0.2897 - wine_quality_loss: 0.2713 - wine_type_loss: 0.0181 - wine_quality_root_mean_squared_error: 0.5210 - wine_type_accuracy: 0.0013 - val_loss: 0.3414 - val_wine_quality_loss: 0.3137 - val_wine_type_loss: 0.0267 - val_wine_quality_root_mean_squared_error: 0.5607 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 124/180\n",
      "3155/3155 [==============================] - 0s 100us/sample - loss: 0.2888 - wine_quality_loss: 0.2710 - wine_type_loss: 0.0181 - wine_quality_root_mean_squared_error: 0.5203 - wine_type_accuracy: 0.0022 - val_loss: 0.3425 - val_wine_quality_loss: 0.3146 - val_wine_type_loss: 0.0267 - val_wine_quality_root_mean_squared_error: 0.5616 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 125/180\n",
      "3155/3155 [==============================] - 0s 101us/sample - loss: 0.2880 - wine_quality_loss: 0.2697 - wine_type_loss: 0.0180 - wine_quality_root_mean_squared_error: 0.5196 - wine_type_accuracy: 0.0022 - val_loss: 0.3301 - val_wine_quality_loss: 0.3027 - val_wine_type_loss: 0.0266 - val_wine_quality_root_mean_squared_error: 0.5506 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 126/180\n",
      "3155/3155 [==============================] - 0s 120us/sample - loss: 0.2881 - wine_quality_loss: 0.2702 - wine_type_loss: 0.0179 - wine_quality_root_mean_squared_error: 0.5197 - wine_type_accuracy: 0.0022 - val_loss: 0.3380 - val_wine_quality_loss: 0.3102 - val_wine_type_loss: 0.0267 - val_wine_quality_root_mean_squared_error: 0.5576 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 127/180\n",
      "3155/3155 [==============================] - 0s 101us/sample - loss: 0.2870 - wine_quality_loss: 0.2690 - wine_type_loss: 0.0179 - wine_quality_root_mean_squared_error: 0.5187 - wine_type_accuracy: 0.0022 - val_loss: 0.3352 - val_wine_quality_loss: 0.3075 - val_wine_type_loss: 0.0268 - val_wine_quality_root_mean_squared_error: 0.5550 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 128/180\n",
      "3155/3155 [==============================] - 0s 118us/sample - loss: 0.2877 - wine_quality_loss: 0.2700 - wine_type_loss: 0.0178 - wine_quality_root_mean_squared_error: 0.5195 - wine_type_accuracy: 0.0022 - val_loss: 0.3380 - val_wine_quality_loss: 0.3103 - val_wine_type_loss: 0.0268 - val_wine_quality_root_mean_squared_error: 0.5575 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 129/180\n",
      "3155/3155 [==============================] - 0s 98us/sample - loss: 0.2858 - wine_quality_loss: 0.2682 - wine_type_loss: 0.0177 - wine_quality_root_mean_squared_error: 0.5177 - wine_type_accuracy: 0.0022 - val_loss: 0.3385 - val_wine_quality_loss: 0.3108 - val_wine_type_loss: 0.0266 - val_wine_quality_root_mean_squared_error: 0.5582 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 130/180\n",
      "3155/3155 [==============================] - 0s 99us/sample - loss: 0.2857 - wine_quality_loss: 0.2682 - wine_type_loss: 0.0177 - wine_quality_root_mean_squared_error: 0.5176 - wine_type_accuracy: 0.0025 - val_loss: 0.3434 - val_wine_quality_loss: 0.3154 - val_wine_type_loss: 0.0268 - val_wine_quality_root_mean_squared_error: 0.5624 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 131/180\n",
      "3155/3155 [==============================] - 0s 115us/sample - loss: 0.2862 - wine_quality_loss: 0.2684 - wine_type_loss: 0.0176 - wine_quality_root_mean_squared_error: 0.5182 - wine_type_accuracy: 0.0022 - val_loss: 0.3393 - val_wine_quality_loss: 0.3116 - val_wine_type_loss: 0.0267 - val_wine_quality_root_mean_squared_error: 0.5588 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 132/180\n",
      "3155/3155 [==============================] - 0s 99us/sample - loss: 0.2854 - wine_quality_loss: 0.2676 - wine_type_loss: 0.0175 - wine_quality_root_mean_squared_error: 0.5176 - wine_type_accuracy: 0.0029 - val_loss: 0.3408 - val_wine_quality_loss: 0.3129 - val_wine_type_loss: 0.0267 - val_wine_quality_root_mean_squared_error: 0.5601 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 133/180\n",
      "3155/3155 [==============================] - 0s 98us/sample - loss: 0.2848 - wine_quality_loss: 0.2672 - wine_type_loss: 0.0174 - wine_quality_root_mean_squared_error: 0.5170 - wine_type_accuracy: 0.0025 - val_loss: 0.3348 - val_wine_quality_loss: 0.3072 - val_wine_type_loss: 0.0266 - val_wine_quality_root_mean_squared_error: 0.5549 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 134/180\n",
      "3155/3155 [==============================] - 0s 98us/sample - loss: 0.2846 - wine_quality_loss: 0.2681 - wine_type_loss: 0.0173 - wine_quality_root_mean_squared_error: 0.5169 - wine_type_accuracy: 0.0029 - val_loss: 0.3295 - val_wine_quality_loss: 0.3020 - val_wine_type_loss: 0.0266 - val_wine_quality_root_mean_squared_error: 0.5501 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 135/180\n",
      "3155/3155 [==============================] - 0s 99us/sample - loss: 0.2844 - wine_quality_loss: 0.2671 - wine_type_loss: 0.0173 - wine_quality_root_mean_squared_error: 0.5168 - wine_type_accuracy: 0.0032 - val_loss: 0.3338 - val_wine_quality_loss: 0.3064 - val_wine_type_loss: 0.0265 - val_wine_quality_root_mean_squared_error: 0.5540 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 136/180\n",
      "3155/3155 [==============================] - 0s 117us/sample - loss: 0.2835 - wine_quality_loss: 0.2657 - wine_type_loss: 0.0173 - wine_quality_root_mean_squared_error: 0.5159 - wine_type_accuracy: 0.0032 - val_loss: 0.3346 - val_wine_quality_loss: 0.3072 - val_wine_type_loss: 0.0266 - val_wine_quality_root_mean_squared_error: 0.5547 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 137/180\n",
      "3155/3155 [==============================] - 0s 100us/sample - loss: 0.2833 - wine_quality_loss: 0.2658 - wine_type_loss: 0.0172 - wine_quality_root_mean_squared_error: 0.5158 - wine_type_accuracy: 0.0032 - val_loss: 0.3388 - val_wine_quality_loss: 0.3113 - val_wine_type_loss: 0.0267 - val_wine_quality_root_mean_squared_error: 0.5584 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 138/180\n",
      "3155/3155 [==============================] - 0s 98us/sample - loss: 0.2832 - wine_quality_loss: 0.2661 - wine_type_loss: 0.0171 - wine_quality_root_mean_squared_error: 0.5158 - wine_type_accuracy: 0.0032 - val_loss: 0.3335 - val_wine_quality_loss: 0.3059 - val_wine_type_loss: 0.0266 - val_wine_quality_root_mean_squared_error: 0.5537 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 139/180\n",
      "3155/3155 [==============================] - 0s 116us/sample - loss: 0.2827 - wine_quality_loss: 0.2652 - wine_type_loss: 0.0170 - wine_quality_root_mean_squared_error: 0.5154 - wine_type_accuracy: 0.0032 - val_loss: 0.3334 - val_wine_quality_loss: 0.3060 - val_wine_type_loss: 0.0266 - val_wine_quality_root_mean_squared_error: 0.5536 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 140/180\n",
      "3155/3155 [==============================] - 0s 98us/sample - loss: 0.2819 - wine_quality_loss: 0.2646 - wine_type_loss: 0.0171 - wine_quality_root_mean_squared_error: 0.5146 - wine_type_accuracy: 0.0032 - val_loss: 0.3376 - val_wine_quality_loss: 0.3103 - val_wine_type_loss: 0.0265 - val_wine_quality_root_mean_squared_error: 0.5574 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 141/180\n",
      "3155/3155 [==============================] - 0s 98us/sample - loss: 0.2820 - wine_quality_loss: 0.2647 - wine_type_loss: 0.0169 - wine_quality_root_mean_squared_error: 0.5148 - wine_type_accuracy: 0.0032 - val_loss: 0.3312 - val_wine_quality_loss: 0.3036 - val_wine_type_loss: 0.0265 - val_wine_quality_root_mean_squared_error: 0.5517 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 142/180\n",
      "3155/3155 [==============================] - 0s 115us/sample - loss: 0.2805 - wine_quality_loss: 0.2637 - wine_type_loss: 0.0168 - wine_quality_root_mean_squared_error: 0.5134 - wine_type_accuracy: 0.0032 - val_loss: 0.3295 - val_wine_quality_loss: 0.3022 - val_wine_type_loss: 0.0265 - val_wine_quality_root_mean_squared_error: 0.5502 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 143/180\n",
      "3155/3155 [==============================] - 0s 100us/sample - loss: 0.2806 - wine_quality_loss: 0.2644 - wine_type_loss: 0.0168 - wine_quality_root_mean_squared_error: 0.5136 - wine_type_accuracy: 0.0032 - val_loss: 0.3373 - val_wine_quality_loss: 0.3100 - val_wine_type_loss: 0.0265 - val_wine_quality_root_mean_squared_error: 0.5572 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 144/180\n",
      "3155/3155 [==============================] - 0s 98us/sample - loss: 0.2802 - wine_quality_loss: 0.2632 - wine_type_loss: 0.0167 - wine_quality_root_mean_squared_error: 0.5132 - wine_type_accuracy: 0.0032 - val_loss: 0.3394 - val_wine_quality_loss: 0.3119 - val_wine_type_loss: 0.0266 - val_wine_quality_root_mean_squared_error: 0.5590 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 145/180\n",
      "3155/3155 [==============================] - 0s 98us/sample - loss: 0.2797 - wine_quality_loss: 0.2631 - wine_type_loss: 0.0166 - wine_quality_root_mean_squared_error: 0.5128 - wine_type_accuracy: 0.0032 - val_loss: 0.3331 - val_wine_quality_loss: 0.3056 - val_wine_type_loss: 0.0265 - val_wine_quality_root_mean_squared_error: 0.5534 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 146/180\n",
      "3155/3155 [==============================] - 0s 114us/sample - loss: 0.2800 - wine_quality_loss: 0.2632 - wine_type_loss: 0.0165 - wine_quality_root_mean_squared_error: 0.5133 - wine_type_accuracy: 0.0032 - val_loss: 0.3383 - val_wine_quality_loss: 0.3110 - val_wine_type_loss: 0.0265 - val_wine_quality_root_mean_squared_error: 0.5581 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 147/180\n",
      "3155/3155 [==============================] - 0s 100us/sample - loss: 0.2787 - wine_quality_loss: 0.2626 - wine_type_loss: 0.0165 - wine_quality_root_mean_squared_error: 0.5121 - wine_type_accuracy: 0.0032 - val_loss: 0.3333 - val_wine_quality_loss: 0.3059 - val_wine_type_loss: 0.0265 - val_wine_quality_root_mean_squared_error: 0.5535 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 148/180\n",
      "3155/3155 [==============================] - 0s 99us/sample - loss: 0.2786 - wine_quality_loss: 0.2618 - wine_type_loss: 0.0165 - wine_quality_root_mean_squared_error: 0.5119 - wine_type_accuracy: 0.0032 - val_loss: 0.3416 - val_wine_quality_loss: 0.3142 - val_wine_type_loss: 0.0265 - val_wine_quality_root_mean_squared_error: 0.5610 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 149/180\n",
      "3155/3155 [==============================] - 0s 99us/sample - loss: 0.2775 - wine_quality_loss: 0.2617 - wine_type_loss: 0.0164 - wine_quality_root_mean_squared_error: 0.5109 - wine_type_accuracy: 0.0032 - val_loss: 0.3334 - val_wine_quality_loss: 0.3062 - val_wine_type_loss: 0.0265 - val_wine_quality_root_mean_squared_error: 0.5536 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 150/180\n",
      "3155/3155 [==============================] - 0s 117us/sample - loss: 0.2782 - wine_quality_loss: 0.2621 - wine_type_loss: 0.0163 - wine_quality_root_mean_squared_error: 0.5117 - wine_type_accuracy: 0.0032 - val_loss: 0.3298 - val_wine_quality_loss: 0.3024 - val_wine_type_loss: 0.0265 - val_wine_quality_root_mean_squared_error: 0.5504 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 151/180\n",
      "3155/3155 [==============================] - 0s 99us/sample - loss: 0.2766 - wine_quality_loss: 0.2604 - wine_type_loss: 0.0162 - wine_quality_root_mean_squared_error: 0.5102 - wine_type_accuracy: 0.0032 - val_loss: 0.3411 - val_wine_quality_loss: 0.3137 - val_wine_type_loss: 0.0265 - val_wine_quality_root_mean_squared_error: 0.5606 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 152/180\n",
      "3155/3155 [==============================] - 0s 99us/sample - loss: 0.2769 - wine_quality_loss: 0.2607 - wine_type_loss: 0.0162 - wine_quality_root_mean_squared_error: 0.5106 - wine_type_accuracy: 0.0032 - val_loss: 0.3325 - val_wine_quality_loss: 0.3052 - val_wine_type_loss: 0.0265 - val_wine_quality_root_mean_squared_error: 0.5528 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 153/180\n",
      "3155/3155 [==============================] - 0s 115us/sample - loss: 0.2760 - wine_quality_loss: 0.2597 - wine_type_loss: 0.0161 - wine_quality_root_mean_squared_error: 0.5098 - wine_type_accuracy: 0.0032 - val_loss: 0.3399 - val_wine_quality_loss: 0.3123 - val_wine_type_loss: 0.0267 - val_wine_quality_root_mean_squared_error: 0.5593 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 154/180\n",
      "3155/3155 [==============================] - 0s 101us/sample - loss: 0.2757 - wine_quality_loss: 0.2597 - wine_type_loss: 0.0161 - wine_quality_root_mean_squared_error: 0.5095 - wine_type_accuracy: 0.0032 - val_loss: 0.3318 - val_wine_quality_loss: 0.3044 - val_wine_type_loss: 0.0265 - val_wine_quality_root_mean_squared_error: 0.5522 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 155/180\n",
      "3155/3155 [==============================] - 0s 100us/sample - loss: 0.2751 - wine_quality_loss: 0.2590 - wine_type_loss: 0.0160 - wine_quality_root_mean_squared_error: 0.5089 - wine_type_accuracy: 0.0032 - val_loss: 0.3341 - val_wine_quality_loss: 0.3070 - val_wine_type_loss: 0.0265 - val_wine_quality_root_mean_squared_error: 0.5543 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 156/180\n",
      "3155/3155 [==============================] - 0s 116us/sample - loss: 0.2753 - wine_quality_loss: 0.2596 - wine_type_loss: 0.0171 - wine_quality_root_mean_squared_error: 0.5093 - wine_type_accuracy: 0.0035 - val_loss: 0.3297 - val_wine_quality_loss: 0.3024 - val_wine_type_loss: 0.0265 - val_wine_quality_root_mean_squared_error: 0.5503 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 157/180\n",
      "3155/3155 [==============================] - 0s 98us/sample - loss: 0.2752 - wine_quality_loss: 0.2596 - wine_type_loss: 0.0159 - wine_quality_root_mean_squared_error: 0.5092 - wine_type_accuracy: 0.0035 - val_loss: 0.3361 - val_wine_quality_loss: 0.3089 - val_wine_type_loss: 0.0265 - val_wine_quality_root_mean_squared_error: 0.5562 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 158/180\n",
      "3155/3155 [==============================] - 0s 99us/sample - loss: 0.2740 - wine_quality_loss: 0.2580 - wine_type_loss: 0.0158 - wine_quality_root_mean_squared_error: 0.5080 - wine_type_accuracy: 0.0035 - val_loss: 0.3320 - val_wine_quality_loss: 0.3043 - val_wine_type_loss: 0.0265 - val_wine_quality_root_mean_squared_error: 0.5524 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 159/180\n",
      "3155/3155 [==============================] - 0s 97us/sample - loss: 0.2735 - wine_quality_loss: 0.2578 - wine_type_loss: 0.0158 - wine_quality_root_mean_squared_error: 0.5076 - wine_type_accuracy: 0.0035 - val_loss: 0.3322 - val_wine_quality_loss: 0.3049 - val_wine_type_loss: 0.0264 - val_wine_quality_root_mean_squared_error: 0.5527 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 160/180\n",
      "3155/3155 [==============================] - 0s 99us/sample - loss: 0.2729 - wine_quality_loss: 0.2578 - wine_type_loss: 0.0157 - wine_quality_root_mean_squared_error: 0.5071 - wine_type_accuracy: 0.0035 - val_loss: 0.3384 - val_wine_quality_loss: 0.3109 - val_wine_type_loss: 0.0264 - val_wine_quality_root_mean_squared_error: 0.5582 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 161/180\n",
      "3155/3155 [==============================] - 0s 116us/sample - loss: 0.2736 - wine_quality_loss: 0.2581 - wine_type_loss: 0.0157 - wine_quality_root_mean_squared_error: 0.5078 - wine_type_accuracy: 0.0038 - val_loss: 0.3343 - val_wine_quality_loss: 0.3072 - val_wine_type_loss: 0.0265 - val_wine_quality_root_mean_squared_error: 0.5545 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 162/180\n",
      "3155/3155 [==============================] - 0s 98us/sample - loss: 0.2735 - wine_quality_loss: 0.2574 - wine_type_loss: 0.0156 - wine_quality_root_mean_squared_error: 0.5078 - wine_type_accuracy: 0.0035 - val_loss: 0.3330 - val_wine_quality_loss: 0.3055 - val_wine_type_loss: 0.0266 - val_wine_quality_root_mean_squared_error: 0.5533 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 163/180\n",
      "3155/3155 [==============================] - 0s 99us/sample - loss: 0.2735 - wine_quality_loss: 0.2584 - wine_type_loss: 0.0156 - wine_quality_root_mean_squared_error: 0.5078 - wine_type_accuracy: 0.0035 - val_loss: 0.3307 - val_wine_quality_loss: 0.3033 - val_wine_type_loss: 0.0266 - val_wine_quality_root_mean_squared_error: 0.5511 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 164/180\n",
      "3155/3155 [==============================] - 0s 115us/sample - loss: 0.2721 - wine_quality_loss: 0.2566 - wine_type_loss: 0.0155 - wine_quality_root_mean_squared_error: 0.5065 - wine_type_accuracy: 0.0038 - val_loss: 0.3315 - val_wine_quality_loss: 0.3040 - val_wine_type_loss: 0.0266 - val_wine_quality_root_mean_squared_error: 0.5518 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 165/180\n",
      "3155/3155 [==============================] - 0s 101us/sample - loss: 0.2718 - wine_quality_loss: 0.2562 - wine_type_loss: 0.0154 - wine_quality_root_mean_squared_error: 0.5063 - wine_type_accuracy: 0.0044 - val_loss: 0.3317 - val_wine_quality_loss: 0.3041 - val_wine_type_loss: 0.0266 - val_wine_quality_root_mean_squared_error: 0.5520 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 166/180\n",
      "3155/3155 [==============================] - 0s 98us/sample - loss: 0.2711 - wine_quality_loss: 0.2555 - wine_type_loss: 0.0154 - wine_quality_root_mean_squared_error: 0.5057 - wine_type_accuracy: 0.0035 - val_loss: 0.3312 - val_wine_quality_loss: 0.3038 - val_wine_type_loss: 0.0265 - val_wine_quality_root_mean_squared_error: 0.5517 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 167/180\n",
      "3155/3155 [==============================] - 0s 115us/sample - loss: 0.2700 - wine_quality_loss: 0.2552 - wine_type_loss: 0.0153 - wine_quality_root_mean_squared_error: 0.5046 - wine_type_accuracy: 0.0041 - val_loss: 0.3434 - val_wine_quality_loss: 0.3158 - val_wine_type_loss: 0.0266 - val_wine_quality_root_mean_squared_error: 0.5625 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 168/180\n",
      "3155/3155 [==============================] - 0s 103us/sample - loss: 0.2711 - wine_quality_loss: 0.2557 - wine_type_loss: 0.0152 - wine_quality_root_mean_squared_error: 0.5058 - wine_type_accuracy: 0.0038 - val_loss: 0.3342 - val_wine_quality_loss: 0.3069 - val_wine_type_loss: 0.0265 - val_wine_quality_root_mean_squared_error: 0.5543 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 169/180\n",
      "3155/3155 [==============================] - 0s 97us/sample - loss: 0.2706 - wine_quality_loss: 0.2555 - wine_type_loss: 0.0152 - wine_quality_root_mean_squared_error: 0.5053 - wine_type_accuracy: 0.0051 - val_loss: 0.3335 - val_wine_quality_loss: 0.3059 - val_wine_type_loss: 0.0266 - val_wine_quality_root_mean_squared_error: 0.5537 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 170/180\n",
      "3155/3155 [==============================] - 0s 97us/sample - loss: 0.2700 - wine_quality_loss: 0.2549 - wine_type_loss: 0.0151 - wine_quality_root_mean_squared_error: 0.5048 - wine_type_accuracy: 0.0044 - val_loss: 0.3289 - val_wine_quality_loss: 0.3016 - val_wine_type_loss: 0.0266 - val_wine_quality_root_mean_squared_error: 0.5495 - val_wine_type_accuracy: 0.0000e+00\n",
      "Epoch 171/180\n",
      "3155/3155 [==============================] - 0s 114us/sample - loss: 0.2691 - wine_quality_loss: 0.2538 - wine_type_loss: 0.0151 - wine_quality_root_mean_squared_error: 0.5039 - wine_type_accuracy: 0.0041 - val_loss: 0.3334 - val_wine_quality_loss: 0.3058 - val_wine_type_loss: 0.0265 - val_wine_quality_root_mean_squared_error: 0.5537 - val_wine_type_accuracy: 0.0013\n",
      "Epoch 172/180\n",
      "3155/3155 [==============================] - 0s 101us/sample - loss: 0.2683 - wine_quality_loss: 0.2539 - wine_type_loss: 0.0151 - wine_quality_root_mean_squared_error: 0.5032 - wine_type_accuracy: 0.0048 - val_loss: 0.3358 - val_wine_quality_loss: 0.3086 - val_wine_type_loss: 0.0265 - val_wine_quality_root_mean_squared_error: 0.5559 - val_wine_type_accuracy: 0.0013\n",
      "Epoch 173/180\n",
      "3155/3155 [==============================] - 0s 102us/sample - loss: 0.2687 - wine_quality_loss: 0.2538 - wine_type_loss: 0.0150 - wine_quality_root_mean_squared_error: 0.5037 - wine_type_accuracy: 0.0044 - val_loss: 0.3406 - val_wine_quality_loss: 0.3130 - val_wine_type_loss: 0.0266 - val_wine_quality_root_mean_squared_error: 0.5601 - val_wine_type_accuracy: 0.0013\n",
      "Epoch 174/180\n",
      "3155/3155 [==============================] - 0s 97us/sample - loss: 0.2681 - wine_quality_loss: 0.2526 - wine_type_loss: 0.0149 - wine_quality_root_mean_squared_error: 0.5032 - wine_type_accuracy: 0.0054 - val_loss: 0.3313 - val_wine_quality_loss: 0.3038 - val_wine_type_loss: 0.0266 - val_wine_quality_root_mean_squared_error: 0.5517 - val_wine_type_accuracy: 0.0013\n",
      "Epoch 175/180\n",
      "3155/3155 [==============================] - 0s 116us/sample - loss: 0.2669 - wine_quality_loss: 0.2522 - wine_type_loss: 0.0149 - wine_quality_root_mean_squared_error: 0.5019 - wine_type_accuracy: 0.0048 - val_loss: 0.3345 - val_wine_quality_loss: 0.3068 - val_wine_type_loss: 0.0266 - val_wine_quality_root_mean_squared_error: 0.5546 - val_wine_type_accuracy: 0.0013\n",
      "Epoch 176/180\n",
      "3155/3155 [==============================] - 0s 100us/sample - loss: 0.2678 - wine_quality_loss: 0.2524 - wine_type_loss: 0.0149 - wine_quality_root_mean_squared_error: 0.5029 - wine_type_accuracy: 0.0051 - val_loss: 0.3345 - val_wine_quality_loss: 0.3070 - val_wine_type_loss: 0.0266 - val_wine_quality_root_mean_squared_error: 0.5546 - val_wine_type_accuracy: 0.0013\n",
      "Epoch 177/180\n",
      "3155/3155 [==============================] - 0s 97us/sample - loss: 0.2668 - wine_quality_loss: 0.2516 - wine_type_loss: 0.0148 - wine_quality_root_mean_squared_error: 0.5020 - wine_type_accuracy: 0.0054 - val_loss: 0.3308 - val_wine_quality_loss: 0.3033 - val_wine_type_loss: 0.0265 - val_wine_quality_root_mean_squared_error: 0.5512 - val_wine_type_accuracy: 0.0013\n",
      "Epoch 178/180\n",
      "3155/3155 [==============================] - 0s 98us/sample - loss: 0.2668 - wine_quality_loss: 0.2520 - wine_type_loss: 0.0149 - wine_quality_root_mean_squared_error: 0.5020 - wine_type_accuracy: 0.0057 - val_loss: 0.3351 - val_wine_quality_loss: 0.3077 - val_wine_type_loss: 0.0266 - val_wine_quality_root_mean_squared_error: 0.5551 - val_wine_type_accuracy: 0.0013\n",
      "Epoch 179/180\n",
      "3155/3155 [==============================] - 0s 115us/sample - loss: 0.2660 - wine_quality_loss: 0.2514 - wine_type_loss: 0.0147 - wine_quality_root_mean_squared_error: 0.5012 - wine_type_accuracy: 0.0057 - val_loss: 0.3332 - val_wine_quality_loss: 0.3057 - val_wine_type_loss: 0.0266 - val_wine_quality_root_mean_squared_error: 0.5534 - val_wine_type_accuracy: 0.0013\n",
      "Epoch 180/180\n",
      "3155/3155 [==============================] - 0s 97us/sample - loss: 0.2660 - wine_quality_loss: 0.2514 - wine_type_loss: 0.0147 - wine_quality_root_mean_squared_error: 0.5013 - wine_type_accuracy: 0.0054 - val_loss: 0.3375 - val_wine_quality_loss: 0.3098 - val_wine_type_loss: 0.0266 - val_wine_quality_root_mean_squared_error: 0.5573 - val_wine_type_accuracy: 0.0013\n"
     ]
    }
   ],
   "source": [
    "## Please uncomment all lines in this cell and replace those marked with `# YOUR CODE HERE`.\n",
    "## You can select all lines in this code cell with Ctrl+A (Windows/Linux) or Cmd+A (Mac), then press Ctrl+/ (Windows/Linux) or Cmd+/ (Mac) to uncomment.\n",
    "history = model.fit(norm_train_X, train_Y,\n",
    "                     epochs = 180, validation_data=(norm_val_X,val_Y))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "fadad8896eda9c8c2115970724b15508",
     "grade": true,
     "grade_id": "cell-eb4d5b41bef8f0ab",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[92m All public tests passed\n"
     ]
    }
   ],
   "source": [
    "utils.test_history(history)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "CubF2J2gSf6q"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "789/789 [==============================] - 0s 22us/sample - loss: 0.3375 - wine_quality_loss: 0.3098 - wine_type_loss: 0.0266 - wine_quality_root_mean_squared_error: 0.5573 - wine_type_accuracy: 0.0013\n",
      "\n",
      "loss: 0.33746899001498637\n",
      "wine_quality_loss: 0.3098294734954834\n",
      "wine_type_loss: 0.026556702330708504\n",
      "wine_quality_rmse: 0.5572804808616638\n",
      "wine_type_accuracy: 0.0012674271129071712\n"
     ]
    }
   ],
   "source": [
    "# Gather the training metrics\n",
    "loss, wine_quality_loss, wine_type_loss, wine_quality_rmse, wine_type_accuracy = model.evaluate(x=norm_val_X, y=val_Y)\n",
    "\n",
    "print()\n",
    "print(f'loss: {loss}')\n",
    "print(f'wine_quality_loss: {wine_quality_loss}')\n",
    "print(f'wine_type_loss: {wine_type_loss}')\n",
    "print(f'wine_quality_rmse: {wine_quality_rmse}')\n",
    "print(f'wine_type_accuracy: {wine_type_accuracy}')\n",
    "\n",
    "# EXPECTED VALUES\n",
    "# ~ 0.30 - 0.38\n",
    "# ~ 0.30 - 0.38\n",
    "# ~ 0.018 - 0.030\n",
    "# ~ 0.50 - 0.62\n",
    "# ~ 0.97 - 1.0\n",
    "\n",
    "# Example:\n",
    "#0.3657050132751465\n",
    "#0.3463745415210724\n",
    "#0.019330406561493874\n",
    "#0.5885359048843384\n",
    "#0.9974651336669922"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "gPtTGAP4usnm"
   },
   "source": [
    "## Analyze the Model Performance\n",
    "\n",
    "Note that the model has two outputs. The output at index 0 is quality and index 1 is wine type\n",
    "\n",
    "So, round the quality predictions to the nearest integer."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "tBq9PEeAaW-Y"
   },
   "outputs": [],
   "source": [
    "predictions = model.predict(norm_test_X)\n",
    "quality_pred = predictions[0]\n",
    "type_pred = predictions[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "YLhgTR4xTIxj"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[5.5367007]\n"
     ]
    }
   ],
   "source": [
    "print(quality_pred[0])\n",
    "\n",
    "# EXPECTED OUTPUT\n",
    "# 5.6 - 6.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "MPi-eYfGTUXi"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.00016956]\n",
      "[0.9999993]\n"
     ]
    }
   ],
   "source": [
    "print(type_pred[0])\n",
    "print(type_pred[944])\n",
    "\n",
    "# EXPECTED OUTPUT\n",
    "# A number close to zero\n",
    "# A number close to or equal to 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "Kohk-9C6vt_s"
   },
   "source": [
    "### Plot Utilities\n",
    "\n",
    "We define a few utilities to visualize the model performance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "62gEOFUhn6aQ"
   },
   "outputs": [],
   "source": [
    "def plot_metrics(metric_name, title, ylim=5):\n",
    "    plt.title(title)\n",
    "    plt.ylim(0,ylim)\n",
    "    plt.plot(history.history[metric_name],color='blue',label=metric_name)\n",
    "    plt.plot(history.history['val_' + metric_name],color='green',label='val_' + metric_name)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "6rfgSx7uz5dj"
   },
   "outputs": [],
   "source": [
    "def plot_confusion_matrix(y_true, y_pred, title='', labels=[0,1]):\n",
    "    cm = confusion_matrix(y_true, y_pred)\n",
    "    fig = plt.figure()\n",
    "    ax = fig.add_subplot(111)\n",
    "    cax = ax.matshow(cm)\n",
    "    plt.title('Confusion matrix of the classifier')\n",
    "    fig.colorbar(cax)\n",
    "    ax.set_xticklabels([''] + labels)\n",
    "    ax.set_yticklabels([''] + labels)\n",
    "    plt.xlabel('Predicted')\n",
    "    plt.ylabel('True')\n",
    "    fmt = 'd'\n",
    "    thresh = cm.max() / 2.\n",
    "    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n",
    "          plt.text(j, i, format(cm[i, j], fmt),\n",
    "                  horizontalalignment=\"center\",\n",
    "                  color=\"black\" if cm[i, j] > thresh else \"white\")\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "dfVLIqi017Vf"
   },
   "outputs": [],
   "source": [
    "def plot_diff(y_true, y_pred, title = '' ):\n",
    "    plt.scatter(y_true, y_pred)\n",
    "    plt.title(title)\n",
    "    plt.xlabel('True Values')\n",
    "    plt.ylabel('Predictions')\n",
    "    plt.axis('equal')\n",
    "    plt.axis('square')\n",
    "    plt.plot([-100, 100], [-100, 100])\n",
    "    return plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "8sd1jdFbwE0I"
   },
   "source": [
    "### Plots for Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "f3MwZ5J1pOfj"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_metrics('wine_quality_root_mean_squared_error', 'RMSE', ylim=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "QIAxEezCppnd"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_metrics('wine_type_loss', 'Wine Type Loss', ylim=0.2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "uYV9AOAMwI9p"
   },
   "source": [
    "### Plots for Confusion Matrix\n",
    "\n",
    "Plot the confusion matrices for wine type. You can see that the model performs well for prediction of wine type from the confusion matrix and the loss metrics."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "C3hvTYxIaf3n"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_confusion_matrix(test_Y[1], np.round(type_pred), title='Wine Type', labels = [0, 1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "GW91ym8P2I5y"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "scatter_plot = plot_diff(test_Y[0], quality_pred, title='Type')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "include_colab_link": true,
   "name": "exercise-answer.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
